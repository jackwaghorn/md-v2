{"version":3,"file":"index.js","sources":["../src/lib/simplyResolveComponent.ts","../src/components/PrismicEmbed.ts","../src/lib/__PRODUCTION__.ts","../src/injectionSymbols.ts","../src/usePrismic.ts","../src/components/PrismicImage.ts","../src/lib/isInternalURL.ts","../src/lib/getSlots.ts","../src/components/PrismicLink.ts","../src/components/PrismicText.ts","../src/components/PrismicRichText.ts","../src/components/SliceZone.ts","../src/createPrismic.ts","../src/types.ts","../src/useStatefulPrismicClientMethod.ts","../src/composables.ts"],"sourcesContent":["import { ConcreteComponent, resolveDynamicComponent, VNode } from \"vue\";\n\n/**\n * A stricter version of {@link resolveDynamicComponent} that resolves only type\n * {@link VNode} for existing components or provided `string`.\n *\n * @param component - An HTML tag name, a component, or a functional component\n *\n * @returns Resolved component as a {@link VNode} or provided `string`.\n *\n * @internal\n */\nexport const simplyResolveComponent = (\n\tcomponent: string | ConcreteComponent,\n): string | VNode => {\n\treturn resolveDynamicComponent(component) as string | VNode;\n};\n","import {\n\tAllowedComponentProps,\n\tComponentCustomProps,\n\tConcreteComponent,\n\tdefineComponent,\n\th,\n\tPropType,\n\tVNodeProps,\n} from \"vue\";\n\nimport { EmbedField } from \"@prismicio/types\";\nimport { simplyResolveComponent } from \"../lib/simplyResolveComponent\";\n\n/**\n * The default component rendered to wrap the embed.\n */\nconst defaultWrapper = \"div\";\n\n/**\n * Props for `<PrismicEmbed />`.\n */\nexport type PrismicEmbedProps = {\n\t/**\n\t * The Prismic embed field to render.\n\t */\n\tfield: EmbedField;\n\n\t/**\n\t * An HTML tag name, a component, or a functional component used to wrap the\n\t * output.\n\t *\n\t * @defaultValue `\"div\"`\n\t */\n\twrapper?: string | ConcreteComponent;\n};\n\n/**\n * `<PrismicEmbed />` implementation.\n *\n * @internal\n */\nexport const PrismicEmbedImpl = /*#__PURE__*/ defineComponent({\n\tname: \"PrismicEmbed\",\n\tprops: {\n\t\tfield: {\n\t\t\ttype: Object as PropType<EmbedField>,\n\t\t\trequired: true,\n\t\t},\n\t\twrapper: {\n\t\t\ttype: [String, Object, Function] as PropType<string | ConcreteComponent>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t},\n\tsetup(props) {\n\t\t// Prevent fatal if user didn't check for field, throws `Invalid prop` warn\n\t\tif (!props.field) {\n\t\t\treturn () => null;\n\t\t}\n\n\t\treturn () => {\n\t\t\treturn h(simplyResolveComponent(props.wrapper || defaultWrapper), {\n\t\t\t\t\"data-oembed\": props.field.embed_url,\n\t\t\t\t\"data-oembed-type\": props.field.type,\n\t\t\t\t\"data-oembed-provider\": props.field.provider_name,\n\t\t\t\tinnerHTML: props.field.html || null,\n\t\t\t});\n\t\t};\n\t},\n});\n\n// export the public type for h/tsx inference\n// also to avoid inline import() in generated d.ts files\n/**\n * Component to render a Prismic embed field.\n *\n * @see Component props {@link PrismicEmbedProps}\n * @see Templating embed fields {@link https://prismic.io/docs/technologies/vue-template-content#embeds}\n */\nexport const PrismicEmbed = PrismicEmbedImpl as unknown as {\n\tnew (): {\n\t\t$props: AllowedComponentProps &\n\t\t\tComponentCustomProps &\n\t\t\tVNodeProps &\n\t\t\tPrismicEmbedProps;\n\t};\n};\n","// We need to polyfill process if it doesn't exist, such as in the browser.\nif (typeof process === \"undefined\") {\n\tglobalThis.process = { env: {} } as typeof process;\n}\n\n/**\n * `true` if in the production environment, `false` otherwise.\n *\n * This boolean can be used to perform actions only in development environments,\n * such as logging.\n */\nexport const __PRODUCTION__ = process.env.NODE_ENV === \"production\";\n","import type { InjectionKey } from \"vue\";\n\nimport type { PrismicPlugin } from \"./types\";\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n// Imports for @link references:\n\nimport type { usePrismic } from \"./usePrismic\";\n\n/* eslint-enable @typescript-eslint/no-unused-vars */\n\n/**\n * `@prismicio/vue` plugin interface interface location used for\n * {@link usePrismic}.\n *\n * @internal\n */\nexport const prismicKey = Symbol(\"prismic\") as InjectionKey<PrismicPlugin>;\n","import { inject } from \"vue\";\n\nimport { prismicKey } from \"./injectionSymbols\";\nimport { PrismicPlugin } from \"./types\";\n\n/**\n * Accesses `@prismicio/vue` plugin interface.\n *\n * @example With the composition API:\n *\n * ```javascript\n * import { usePrismic } from \"@prismicio/vue\";\n *\n * export default {\n * \tsetup() {\n * \t\tconst prismic = usePrismic();\n *\n * \t\treturn {};\n * \t},\n * };\n * ```\n *\n * @returns The interface {@link PrismicPlugin}\n */\nexport const usePrismic = (): PrismicPlugin => {\n\treturn inject(prismicKey, { options: { endpoint: \"\" } } as PrismicPlugin);\n};\n","import {\n\tAllowedComponentProps,\n\tComponentCustomProps,\n\tcomputed,\n\tConcreteComponent,\n\tComputedRef,\n\tdefineComponent,\n\th,\n\tPropType,\n\tVNodeProps,\n\tunref,\n} from \"vue\";\n\nimport { ImageField } from \"@prismicio/types\";\nimport {\n\tasImageSrc,\n\tasImageWidthSrcSet,\n\tasImagePixelDensitySrcSet,\n\tisFilled,\n} from \"@prismicio/helpers\";\n\nimport { simplyResolveComponent } from \"../lib/simplyResolveComponent\";\nimport { __PRODUCTION__ } from \"../lib/__PRODUCTION__\";\nimport { usePrismic } from \"../usePrismic\";\nimport { VueUseOptions } from \"../types\";\n\n/**\n * The default component rendered for images.\n */\nconst defaultImageComponent = \"img\";\n\n/**\n * Props for `<PrismicImage />`.\n */\nexport type PrismicImageProps = {\n\t/**\n\t * The Prismic image field to render.\n\t */\n\tfield: ImageField;\n\n\t/**\n\t * An HTML tag name, a component, or a functional component used to render\n\t * images.\n\t *\n\t * @remarks\n\t * HTML tag names and components will be rendered using the `img` tag\n\t * interface (`src`, `srcset`, and `alt` attribute). Components will also\n\t * receive an additional `copyright` props.\n\t * @defaultValue The one provided to `@prismicio/vue` plugin if configured, `\"img\"` otherwise.\n\t */\n\timageComponent?: string | ConcreteComponent;\n\n\t/**\n\t * An object of Imgix URL API parameters.\n\t *\n\t * @see Imgix URL parameters reference: https://docs.imgix.com/apis/rendering\n\t */\n\timgixParams?: Parameters<typeof asImageSrc>[1];\n\n\t/**\n\t * Adds an additional `srcset` attribute to the image following given widths.\n\t *\n\t * @remarks\n\t * A special value of `\"thumbnails\"` is accepted to automatically use image\n\t * widths coming from the API.\n\t * @remarks\n\t * A special value of `\"defaults\"` is accepted to automatically use image\n\t * widths coming from the plugin configuration.\n\t * @remarks\n\t * This prop is not compatible with the `pixelDensities` prop. When both are\n\t * used the `pixelDensities` prop will be ignored.\n\t */\n\twidths?:\n\t\t| NonNullable<Parameters<typeof asImageWidthSrcSet>[1]>[\"widths\"]\n\t\t| \"thumbnails\"\n\t\t| \"defaults\";\n\n\t/**\n\t * Adds an additional `srcset` attribute to the image following giving pixel\n\t * densities.\n\t *\n\t * @remarks\n\t * A special value of `\"defaults\"` is accepted to automatically use image\n\t * pixel densities coming from the plugin configuration.\n\t * @remarks\n\t * This prop is not compatible with the `widths` prop. When both are used, the\n\t * `pixelDensities` prop will be ignored.\n\t */\n\tpixelDensities?:\n\t\t| NonNullable<\n\t\t\t\tParameters<typeof asImagePixelDensitySrcSet>[1]\n\t\t  >[\"pixelDensities\"]\n\t\t| \"defaults\";\n};\n\n/**\n * Options for {@link usePrismicImage}.\n */\nexport type UsePrismicImageOptions = VueUseOptions<\n\tOmit<PrismicImageProps, \"imageComponent\">\n>;\n\n/**\n * Return type of {@link usePrismicImage}.\n */\nexport type UsePrismicImageReturnType = {\n\t/**\n\t * Resolved image `src` value.\n\t */\n\tsrc: ComputedRef<string | null>;\n\n\t/**\n\t * Resolved image `srcset` value.\n\t */\n\tsrcset: ComputedRef<string | null>;\n\n\t/**\n\t * Resolved image `alt` value.\n\t */\n\talt: ComputedRef<string>;\n\n\t/**\n\t * Resolved image `copyright` value.\n\t */\n\tcopyright: ComputedRef<string | null>;\n};\n\n/**\n * A low level composable that returns a resolved information about a Prismic\n * image field.\n *\n * @param props - {@link UsePrismicImageOptions}\n *\n * @returns - Resolved image information {@link UsePrismicImageReturnType}\n */\nexport const usePrismicImage = (\n\tprops: UsePrismicImageOptions,\n): UsePrismicImageReturnType => {\n\tconst { options } = usePrismic();\n\n\tconst asImage = computed(() => {\n\t\tconst field = unref(props.field);\n\n\t\tif (!isFilled.image(field)) {\n\t\t\treturn {\n\t\t\t\tsrc: null,\n\t\t\t\tsrcset: null,\n\t\t\t};\n\t\t}\n\n\t\tconst imgixParams = unref(props.imgixParams);\n\t\tconst widths = unref(props.widths);\n\t\tconst pixelDensities = unref(props.pixelDensities);\n\n\t\tif (widths) {\n\t\t\tif (!__PRODUCTION__ && pixelDensities) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t\"[PrismicImage] Only one of `widths` or `pixelDensities` props can be provided. You can resolve this warning by removing either the `widths` or `pixelDensities` prop. `widths` will be used in this case.\",\n\t\t\t\t\tprops,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn asImageWidthSrcSet(field, {\n\t\t\t\t...imgixParams,\n\t\t\t\twidths:\n\t\t\t\t\twidths === \"defaults\"\n\t\t\t\t\t\t? options.components?.imageWidthSrcSetDefaults\n\t\t\t\t\t\t: widths,\n\t\t\t});\n\t\t} else if (pixelDensities) {\n\t\t\treturn asImagePixelDensitySrcSet(field, {\n\t\t\t\t...imgixParams,\n\t\t\t\tpixelDensities:\n\t\t\t\t\tpixelDensities === \"defaults\"\n\t\t\t\t\t\t? options.components?.imagePixelDensitySrcSetDefaults\n\t\t\t\t\t\t: pixelDensities,\n\t\t\t});\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tsrc: asImageSrc(field, imgixParams),\n\t\t\t\tsrcset: null,\n\t\t\t};\n\t\t}\n\t});\n\n\tconst src = computed(() => {\n\t\treturn asImage.value.src;\n\t});\n\tconst srcset = computed(() => {\n\t\treturn asImage.value.srcset;\n\t});\n\tconst alt = computed(() => {\n\t\treturn unref(props.field).alt || \"\";\n\t});\n\tconst copyright = computed(() => {\n\t\treturn unref(props.field).copyright || null;\n\t});\n\n\treturn {\n\t\tsrc,\n\t\tsrcset,\n\t\talt,\n\t\tcopyright,\n\t};\n};\n\n/**\n * `<PrismicImage />` implementation.\n *\n * @internal\n */\nexport const PrismicImageImpl = /*#__PURE__*/ defineComponent({\n\tname: \"PrismicImage\",\n\tprops: {\n\t\tfield: {\n\t\t\ttype: Object as PropType<ImageField>,\n\t\t\trequired: true,\n\t\t},\n\t\timageComponent: {\n\t\t\ttype: [String, Object] as PropType<string | ConcreteComponent>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t\timgixParams: {\n\t\t\ttype: Object as PropType<Parameters<typeof asImageSrc>[1]>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t\twidths: {\n\t\t\ttype: [String, Object] as PropType<\n\t\t\t\t| NonNullable<Parameters<typeof asImageWidthSrcSet>[1]>[\"widths\"]\n\t\t\t\t| \"thumbnails\"\n\t\t\t\t| \"defaults\"\n\t\t\t>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t\tpixelDensities: {\n\t\t\ttype: [String, Object] as PropType<\n\t\t\t\t| NonNullable<\n\t\t\t\t\t\tParameters<typeof asImagePixelDensitySrcSet>[1]\n\t\t\t\t  >[\"pixelDensities\"]\n\t\t\t\t| \"defaults\"\n\t\t\t>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t},\n\tsetup(props) {\n\t\t// Prevent fatal if user didn't check for field, throws `Invalid prop` warn\n\t\tif (!props.field) {\n\t\t\treturn () => null;\n\t\t}\n\n\t\tconst { options } = usePrismic();\n\n\t\tconst type = computed(() => {\n\t\t\treturn (\n\t\t\t\tprops.imageComponent ||\n\t\t\t\toptions.components?.imageComponent ||\n\t\t\t\tdefaultImageComponent\n\t\t\t);\n\t\t});\n\n\t\tconst { src, srcset, alt, copyright } = usePrismicImage(props);\n\n\t\treturn () => {\n\t\t\tconst attributes = {\n\t\t\t\tsrc: src.value,\n\t\t\t\tsrcset: srcset.value,\n\t\t\t\talt: alt.value,\n\t\t\t};\n\n\t\t\tswitch (type.value) {\n\t\t\t\tcase \"img\":\n\t\t\t\t\t// Fitting img tag interface\n\t\t\t\t\treturn h(\"img\", attributes);\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn h(simplyResolveComponent(type.value), {\n\t\t\t\t\t\t...attributes,\n\t\t\t\t\t\tcopyright: copyright.value,\n\t\t\t\t\t});\n\t\t\t}\n\t\t};\n\t},\n});\n\n// export the public type for h/tsx inference\n// also to avoid inline import() in generated d.ts files\n/**\n * Component to render a Prismic image field.\n *\n * @see Component props {@link PrismicImageProps}\n * @see Templating image fields {@link https://prismic.io/docs/technologies/vue-template-content#images}\n */\nexport const PrismicImage = PrismicImageImpl as unknown as {\n\tnew (): {\n\t\t$props: AllowedComponentProps &\n\t\t\tComponentCustomProps &\n\t\t\tVNodeProps &\n\t\t\tPrismicImageProps;\n\t};\n};\n","/**\n * Determines if a URL is internal or external.\n *\n * @param url - The URL to check if internal or external\n *\n * @returns `true` if `url` is internal, `false` otherwise\n */\n// TODO: This does not detect all relative URLs as internal, such as `about` or `./about`. This function assumes relative URLs start with a \"/\"`.\nexport const isInternalURL = (url: string): boolean => {\n\t/**\n\t * @see Regex101 expression: {@link https://regex101.com/r/1y7iod/1}\n\t */\n\tconst isInternal = /^\\/(?!\\/)/.test(url);\n\t/**\n\t * @see Regex101 expression: {@link https://regex101.com/r/RnUseS/1}\n\t */\n\tconst isSpecialLink = !isInternal && !/^https?:\\/\\//i.test(url);\n\n\treturn isInternal && !isSpecialLink;\n};\n","import { ConcreteComponent, Slots, VNode } from \"vue\";\n\n/**\n * Get the appropriate `slots` object/array according to the provided parent,\n * fixing `Non-function value encountered for default slot.` warnings.\n *\n * @param parent - The parent inheriting slots\n * @param slots - The `slots` to transform for parent\n * @param defaultParams - The parameters to provide to the default slot\n *\n * @returns The appropriate slots object/array\n *\n * @internal\n */\nexport const getSlots = (\n\tparent: string | ConcreteComponent,\n\tslots: Slots,\n\tdefaultPayload?: unknown,\n): VNode[] | undefined | Slots => {\n\tif (typeof parent === \"string\") {\n\t\treturn slots.default && slots.default(defaultPayload);\n\t} else {\n\t\tif (slots.default) {\n\t\t\tconst content = slots.default(defaultPayload);\n\n\t\t\treturn {\n\t\t\t\t...slots,\n\t\t\t\tdefault: () => content,\n\t\t\t};\n\t\t} else {\n\t\t\treturn slots;\n\t\t}\n\t}\n};\n","import {\n\tAllowedComponentProps,\n\tComponentCustomProps,\n\tdefineComponent,\n\th,\n\tPropType,\n\tVNodeProps,\n\tunref,\n\treactive,\n\tConcreteComponent,\n\tcomputed,\n\tComputedRef,\n} from \"vue\";\n\nimport { asLink, LinkResolverFunction } from \"@prismicio/helpers\";\nimport { LinkField, PrismicDocument } from \"@prismicio/types\";\n\nimport { isInternalURL } from \"../lib/isInternalURL\";\nimport { usePrismic } from \"../usePrismic\";\nimport { VueUseOptions } from \"../types\";\nimport { simplyResolveComponent } from \"../lib/simplyResolveComponent\";\nimport { getSlots } from \"../lib/getSlots\";\n\n/**\n * The default component rendered for internal URLs.\n */\nconst defaultInternalComponent = \"router-link\";\n\n/**\n * The default component rendered for external URLs.\n */\nconst defaultExternalComponent = \"a\";\n\n/**\n * The default rel attribute rendered for blank target URLs.\n */\nconst defaultBlankTargetRelAttribute = \"noopener noreferrer\";\n\n/**\n * Props for `<PrismicLink />`.\n */\nexport type PrismicLinkProps = {\n\t/**\n\t * The Prismic link field or document to render.\n\t */\n\tfield: LinkField | PrismicDocument;\n\n\t/**\n\t * A link resolver function used to resolve links when not using the route\n\t * resolver parameter with `@prismicio/client`.\n\t *\n\t * @defaultValue The link resolver provided to `@prismicio/vue` plugin if configured.\n\t *\n\t * @see Link resolver documentation {@link https://prismic.io/docs/core-concepts/link-resolver-route-resolver#link-resolver}\n\t */\n\tlinkResolver?: LinkResolverFunction;\n\n\t/**\n\t * An explicit `target` attribute to apply to the rendered link.\n\t */\n\ttarget?: string | null;\n\n\t/**\n\t * An explicit `rel` attribute to apply to the rendered link.\n\t */\n\trel?: string | null;\n\n\t/**\n\t * Value of the `rel` attribute to use on links rendered with\n\t * `target=\"_blank\"`.\n\t *\n\t * @defaultValue The one provided to `@prismicio/vue` plugin if configured, `\"noopener noreferrer\"` otherwise.\n\t */\n\tblankTargetRelAttribute?: string | null;\n\n\t/**\n\t * An HTML tag name, a component, or a functional component used to render\n\t * internal links.\n\t *\n\t * @remarks\n\t * HTML tag names will be rendered using the anchor tag interface (`href`,\n\t * `target`, and `rel` attributes).\n\t * @remarks\n\t * Components will be rendered using Vue Router {@link RouterLink} interface\n\t * (`to` props).\n\t * @defaultValue The one provided to `@prismicio/vue` plugin if configured, {@link RouterLink} otherwise.\n\t */\n\tinternalComponent?: string | ConcreteComponent;\n\n\t/**\n\t * An HTML tag name, a component, or a functional component used to render\n\t * external links.\n\t *\n\t * @remarks\n\t * HTML tag names will be rendered using the anchor tag interface (`href`,\n\t * `target`, and `rel` attributes).\n\t * @remarks\n\t * Components will be rendered using Vue Router {@link RouterLink} interface\n\t * (`to` props).\n\t * @defaultValue The one provided to `@prismicio/vue` plugin if configured, `\"a\"` otherwise.\n\t */\n\texternalComponent?: string | ConcreteComponent;\n};\n\n/**\n * Options for {@link usePrismicLink}.\n */\nexport type UsePrismicLinkOptions = VueUseOptions<PrismicLinkProps>;\n\n/**\n * Return type of {@link usePrismicLink}.\n */\nexport type UsePrismicLinkReturnType = {\n\t/**\n\t * Suggested component to render for provided link field.\n\t */\n\ttype: ComputedRef<string | ConcreteComponent>;\n\n\t/**\n\t * Resolved anchor `href` value.\n\t */\n\thref: ComputedRef<string>;\n\n\t/**\n\t * Resolved anchor `target` value.\n\t */\n\ttarget: ComputedRef<string | null>;\n\n\t/**\n\t * Resolved anchor `rel` value.\n\t */\n\trel: ComputedRef<string | null>;\n};\n\n/**\n * A low level composable that returns resolved information about a Prismic link\n * field.\n *\n * @param props - {@link UsePrismicLinkOptions}\n *\n * @returns - Resolved link information {@link UsePrismicLinkReturnType}\n */\nexport const usePrismicLink = (\n\tprops: UsePrismicLinkOptions,\n): UsePrismicLinkReturnType => {\n\tconst { options } = usePrismic();\n\n\tconst type = computed(() => {\n\t\tconst internalComponent =\n\t\t\tunref(props.internalComponent) ||\n\t\t\toptions.components?.linkInternalComponent ||\n\t\t\tdefaultInternalComponent;\n\n\t\tconst externalComponent =\n\t\t\tunref(props.externalComponent) ||\n\t\t\toptions.components?.linkExternalComponent ||\n\t\t\tdefaultExternalComponent;\n\n\t\treturn href.value && isInternalURL(href.value) && !target.value\n\t\t\t? internalComponent\n\t\t\t: externalComponent;\n\t});\n\tconst href = computed(() => {\n\t\tconst field = unref(props.field);\n\t\tconst linkResolver = unref(props.linkResolver) ?? options.linkResolver;\n\n\t\treturn asLink(field, linkResolver) ?? \"\";\n\t});\n\tconst target = computed(() => {\n\t\tconst field = unref(props.field);\n\t\tconst target = unref(props.target);\n\n\t\tif (typeof target !== \"undefined\") {\n\t\t\treturn target;\n\t\t} else {\n\t\t\treturn field && \"target\" in field && field.target ? field.target : null;\n\t\t}\n\t});\n\tconst rel = computed(() => {\n\t\tconst rel = unref(props.rel);\n\n\t\tif (typeof rel !== \"undefined\") {\n\t\t\treturn rel;\n\t\t} else if (target.value === \"_blank\") {\n\t\t\tconst blankTargetRelAttribute = unref(props.blankTargetRelAttribute);\n\n\t\t\tif (typeof blankTargetRelAttribute !== \"undefined\") {\n\t\t\t\treturn blankTargetRelAttribute;\n\t\t\t} else {\n\t\t\t\treturn typeof options.components?.linkBlankTargetRelAttribute !==\n\t\t\t\t\t\"undefined\"\n\t\t\t\t\t? options.components.linkBlankTargetRelAttribute\n\t\t\t\t\t: defaultBlankTargetRelAttribute;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t});\n\n\treturn {\n\t\ttype,\n\t\thref,\n\t\ttarget,\n\t\trel,\n\t};\n};\n\n/**\n * `<PrismicLink />` implementation.\n *\n * @internal\n */\nexport const PrismicLinkImpl = /*#__PURE__*/ defineComponent({\n\tname: \"PrismicLink\",\n\tprops: {\n\t\tfield: {\n\t\t\ttype: Object as PropType<LinkField | PrismicDocument>,\n\t\t\trequired: true,\n\t\t},\n\t\tlinkResolver: {\n\t\t\ttype: Function as PropType<LinkResolverFunction>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t\ttarget: {\n\t\t\ttype: String as PropType<string | null>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t\trel: {\n\t\t\ttype: String as PropType<string | null>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t\tblankTargetRelAttribute: {\n\t\t\ttype: String as PropType<string | null>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t\tinternalComponent: {\n\t\t\ttype: [String, Object, Function] as PropType<string | ConcreteComponent>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t\texternalComponent: {\n\t\t\ttype: [String, Object, Function] as PropType<string | ConcreteComponent>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t},\n\tsetup(props, { slots }) {\n\t\t// Prevent fatal if user didn't check for field, throws `Invalid prop` warn\n\t\tif (!props.field) {\n\t\t\treturn () => null;\n\t\t}\n\n\t\tconst { type, href, target, rel } = usePrismicLink(props);\n\n\t\treturn () => {\n\t\t\tconst parent =\n\t\t\t\ttype.value === \"a\" ? \"a\" : simplyResolveComponent(type.value);\n\t\t\tconst computedSlots = getSlots(\n\t\t\t\tparent,\n\t\t\t\tslots,\n\t\t\t\treactive({ href: href.value }),\n\t\t\t);\n\n\t\t\tif (typeof parent === \"string\") {\n\t\t\t\t// Fitting anchor tag interface\n\t\t\t\treturn h(\n\t\t\t\t\tparent,\n\t\t\t\t\t{ href: href.value, target: target.value, rel: rel.value },\n\t\t\t\t\tcomputedSlots,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// Fitting Vue Router Link interface\n\t\t\t\treturn h(parent, { to: href.value }, computedSlots);\n\t\t\t}\n\t\t};\n\t},\n});\n\n// export the public type for h/tsx inference\n// also to avoid inline import() in generated d.ts files\n/**\n * Component to render a Prismic link field.\n *\n * @see Component props {@link PrismicLinkProps}\n * @see Templating link fields {@link https://prismic.io/docs/technologies/vue-template-content#links-and-content-relationships}\n */\nexport const PrismicLink = PrismicLinkImpl as unknown as {\n\tnew (): {\n\t\t$props: AllowedComponentProps &\n\t\t\tComponentCustomProps &\n\t\t\tVNodeProps &\n\t\t\tPrismicLinkProps;\n\t};\n};\n","import {\n\tAllowedComponentProps,\n\tComponentCustomProps,\n\tcomputed,\n\tComputedRef,\n\tConcreteComponent,\n\tdefineComponent,\n\th,\n\tPropType,\n\tunref,\n\tVNode,\n\tVNodeProps,\n} from \"vue\";\n\nimport { asText, isFilled } from \"@prismicio/helpers\";\nimport { RichTextField } from \"@prismicio/types\";\n\nimport { VueUseOptions } from \"../types\";\nimport { simplyResolveComponent } from \"../lib/simplyResolveComponent\";\n\n/**\n * The default component rendered to wrap the text output.\n */\nconst defaultWrapper = \"div\";\n/**\n * Props for `<PrismicText />`.\n */\nexport type PrismicTextProps = {\n\t/**\n\t * The Prismic rich text or title field to render.\n\t */\n\tfield: RichTextField | null | undefined;\n\n\t/**\n\t * Separator used to join each element.\n\t *\n\t * @defaultValue `\" \"` (a space)\n\t */\n\tseparator?: string;\n\n\t/**\n\t * An HTML tag name, a component, or a functional component used to wrap the\n\t * output.\n\t *\n\t * @defaultValue `\"div\"`\n\t */\n\twrapper?: string | ConcreteComponent;\n\n\t/**\n\t * The string value to be rendered when the field is empty. If a fallback is\n\t * not given, `\"\"` (nothing) will be rendered.\n\t */\n\tfallback?: string;\n};\n\n/**\n * Options for {@link usePrismicText}.\n */\nexport type UsePrismicTextOptions = VueUseOptions<\n\tOmit<PrismicTextProps, \"wrapper\">\n>;\n\n/**\n * Return type of {@link usePrismicText}.\n */\nexport type UsePrismicTextReturnType = {\n\t/**\n\t * Serialized rich text field as plain text.\n\t */\n\ttext: ComputedRef<string>;\n};\n\n/**\n * A low level composable that returns a serialized rich text field as plain\n * text.\n *\n * @param props - {@link UsePrismicTextOptions}\n *\n * @returns - Serialized rich text field as plain text\n *   {@link UsePrismicTextReturnType}\n */\nexport const usePrismicText = (\n\tprops: UsePrismicTextOptions,\n): UsePrismicTextReturnType => {\n\tconst text = computed(() => {\n\t\tconst field = unref(props.field);\n\n\t\tif (!isFilled.richText(field)) {\n\t\t\treturn unref(props.fallback) ?? \"\";\n\t\t}\n\n\t\treturn asText(unref(field), unref(props.separator));\n\t});\n\n\treturn {\n\t\ttext,\n\t};\n};\n\n/**\n * `<PrismicText />` implementation.\n *\n * @internal\n */\nexport const PrismicTextImpl = /*#__PURE__*/ defineComponent({\n\tname: \"PrismicText\",\n\tprops: {\n\t\tfield: {\n\t\t\ttype: Array as unknown as PropType<RichTextField | null | undefined>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t\tseparator: {\n\t\t\ttype: String as PropType<string>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t\twrapper: {\n\t\t\ttype: [String, Object, Function] as PropType<string | ConcreteComponent>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t\tfallback: {\n\t\t\ttype: String as PropType<string>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t},\n\tsetup(props) {\n\t\tconst { text } = usePrismicText(props);\n\n\t\treturn () => {\n\t\t\tconst parent = simplyResolveComponent(props.wrapper || defaultWrapper);\n\n\t\t\t// This works but is absurd\n\t\t\t// if (typeof parent === \"string\") {\n\t\t\t// \treturn h(parent, null, { default: () => text.value });\n\t\t\t// } else {\n\t\t\t// \treturn h(parent, null, { default: () => text.value });\n\t\t\t// }\n\n\t\t\treturn h(parent as VNode, null, {\n\t\t\t\tdefault: () => text.value,\n\t\t\t});\n\t\t};\n\t},\n});\n\n// export the public type for h/tsx inference\n// also to avoid inline import() in generated d.ts files\n/**\n * Component to render a Prismic rich text field as plain text.\n *\n * @see Component props {@link PrismicTextProps}\n * @see Templating rich text and title fields {@link https://prismic.io/docs/technologies/vue-template-content#rich-text-and-titles}\n */\nexport const PrismicText = PrismicTextImpl as unknown as {\n\tnew (): {\n\t\t$props: AllowedComponentProps &\n\t\t\tComponentCustomProps &\n\t\t\tVNodeProps &\n\t\t\tPrismicTextProps;\n\t};\n};\n","import {\n\tAllowedComponentProps,\n\tComponent,\n\tComponentCustomProps,\n\tcomputed,\n\tComputedRef,\n\tConcreteComponent,\n\tdefineComponent,\n\th,\n\tinject,\n\tnextTick,\n\tonBeforeUnmount,\n\tPropType,\n\tref,\n\tunref,\n\tVNodeProps,\n\twatch,\n} from \"vue\";\nimport { routerKey } from \"vue-router\";\n\nimport {\n\tasHTML,\n\tHTMLFunctionSerializer,\n\tHTMLMapSerializer,\n\tisFilled,\n\tLinkResolverFunction,\n} from \"@prismicio/helpers\";\nimport { RichTextField } from \"@prismicio/types\";\n\nimport { VueUseOptions } from \"../types\";\nimport { usePrismic } from \"../usePrismic\";\nimport { simplyResolveComponent } from \"../lib/simplyResolveComponent\";\nimport { isInternalURL } from \"../lib/isInternalURL\";\n\n/**\n * The default component rendered to wrap the HTML output.\n */\nconst defaultWrapper = \"div\";\n\n/**\n * Props for `<PrismicRichText />`.\n */\nexport type PrismicRichTextProps = {\n\t/**\n\t * The Prismic rich text or title field to render.\n\t */\n\tfield: RichTextField | null | undefined;\n\n\t/**\n\t * A link resolver function used to resolve link when not using the route\n\t * resolver parameter with `@prismicio/client`.\n\t *\n\t * @defaultValue The link resolver provided to `@prismicio/vue` plugin if configured.\n\t *\n\t * @see Link resolver documentation {@link https://prismic.io/docs/core-concepts/link-resolver-route-resolver#link-resolver}\n\t */\n\tlinkResolver?: LinkResolverFunction;\n\n\t/**\n\t * An HTML serializer to customize the way rich text fields are rendered.\n\t *\n\t * @defaultValue The HTML serializer provided to `@prismicio/vue` plugin if configured.\n\t *\n\t * @see HTML serializer documentation {@link https://prismic.io/docs/core-concepts/html-serializer}\n\t */\n\thtmlSerializer?: HTMLFunctionSerializer | HTMLMapSerializer;\n\n\t/**\n\t * An HTML tag name, a component, or a functional component used to wrap the\n\t * output.\n\t *\n\t * @defaultValue `\"div\"`\n\t */\n\twrapper?: string | ConcreteComponent;\n\n\t/**\n\t * The HTML value to be rendered when the field is empty. If a fallback is not\n\t * given, `\"\"` (nothing) will be rendered.\n\t */\n\tfallback?: string;\n};\n\n/**\n * Options for {@link usePrismicRichText}.\n */\nexport type UsePrismicRichTextOptions = VueUseOptions<\n\tOmit<PrismicRichTextProps, \"wrapper\">\n>;\n\n/**\n * Return type of {@link usePrismicRichText}.\n */\nexport type UsePrismicRichTextReturnType = {\n\t/**\n\t * Serialized rich text field as HTML.\n\t */\n\thtml: ComputedRef<string>;\n};\n\n/**\n * A low level composable that returns a serialized rich text field as HTML.\n *\n * @param props - {@link UsePrismicRichTextOptions}\n *\n * @returns - Serialized rich text field as HTML\n *   {@link UsePrismicRichTextReturnType}\n */\nexport const usePrismicRichText = (\n\tprops: UsePrismicRichTextOptions,\n): UsePrismicRichTextReturnType => {\n\tconst { options } = usePrismic();\n\n\tconst html = computed(() => {\n\t\tconst field = unref(props.field);\n\n\t\tif (!isFilled.richText(field)) {\n\t\t\treturn unref(props.fallback) ?? \"\";\n\t\t}\n\n\t\tconst linkResolver = unref(props.linkResolver) ?? options.linkResolver;\n\t\tconst htmlSerializer =\n\t\t\tunref(props.htmlSerializer) ?? options.htmlSerializer;\n\n\t\treturn asHTML(unref(field), linkResolver, htmlSerializer);\n\t});\n\n\treturn {\n\t\thtml,\n\t};\n};\n\n/**\n * `<PrismicRichText />` implementation.\n *\n * @internal\n */\nexport const PrismicRichTextImpl = /*#__PURE__*/ defineComponent({\n\tname: \"PrismicRichText\",\n\tprops: {\n\t\tfield: {\n\t\t\ttype: Array as unknown as PropType<RichTextField | null | undefined>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t\tlinkResolver: {\n\t\t\ttype: Function as PropType<LinkResolverFunction>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t\thtmlSerializer: {\n\t\t\ttype: [Function, Object] as PropType<\n\t\t\t\tHTMLFunctionSerializer | HTMLMapSerializer\n\t\t\t>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t\twrapper: {\n\t\t\ttype: [String, Object, Function] as PropType<string | ConcreteComponent>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t\tfallback: {\n\t\t\ttype: String as PropType<string>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t},\n\tsetup(props) {\n\t\tconst { html } = usePrismicRichText(props);\n\n\t\tconst root = ref<HTMLElement | Comment | Component | null>(null);\n\n\t\tconst maybeRouter = inject(routerKey, null);\n\t\tif (maybeRouter) {\n\t\t\ttype InternalLink = {\n\t\t\t\telement: HTMLAnchorElement;\n\t\t\t\tlistener: EventListener;\n\t\t\t};\n\t\t\tlet links: InternalLink[] = [];\n\n\t\t\tconst navigate: EventListener = function (\n\t\t\t\tthis: { href: string },\n\t\t\t\tevent: Event,\n\t\t\t) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tmaybeRouter.push(this.href);\n\t\t\t};\n\n\t\t\tconst addListeners = () => {\n\t\t\t\tconst node: HTMLElement | Comment | null =\n\t\t\t\t\troot.value && \"$el\" in root.value ? root.value.$el : root.value;\n\t\t\t\tif (node && \"querySelectorAll\" in node) {\n\t\t\t\t\t// Get all internal link tags and add listeners on them\n\t\t\t\t\tlinks = Array.from(node.querySelectorAll(\"a\"))\n\t\t\t\t\t\t.map((element) => {\n\t\t\t\t\t\t\tconst href = element.getAttribute(\"href\");\n\n\t\t\t\t\t\t\tif (href && isInternalURL(href)) {\n\t\t\t\t\t\t\t\tconst listener = navigate.bind({ href });\n\t\t\t\t\t\t\t\telement.addEventListener(\"click\", listener);\n\n\t\t\t\t\t\t\t\treturn { element, listener };\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.filter((link): link is InternalLink => link as boolean);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst removeListeners = () => {\n\t\t\t\tlinks.forEach(({ element, listener }) =>\n\t\t\t\t\telement.removeEventListener(\"click\", listener),\n\t\t\t\t);\n\t\t\t\tlinks = [];\n\t\t\t};\n\n\t\t\twatch(\n\t\t\t\thtml,\n\t\t\t\t() => {\n\t\t\t\t\tremoveListeners();\n\t\t\t\t\tnextTick(addListeners);\n\t\t\t\t},\n\t\t\t\t{ immediate: true },\n\t\t\t);\n\n\t\t\tonBeforeUnmount(() => {\n\t\t\t\tremoveListeners();\n\t\t\t});\n\t\t}\n\n\t\treturn () => {\n\t\t\treturn h(simplyResolveComponent(props.wrapper || defaultWrapper), {\n\t\t\t\tinnerHTML: html.value,\n\t\t\t\tref: root,\n\t\t\t});\n\t\t};\n\t},\n});\n\n// export the public type for h/tsx inference\n// also to avoid inline import() in generated d.ts files\n/**\n * Component to render a Prismic rich text field as HTML.\n *\n * @see Component props {@link PrismicRichTextProps}\n * @see Templating rich text and title fields {@link https://prismic.io/docs/technologies/vue-template-content#rich-text-and-titles}\n */\nexport const PrismicRichText = PrismicRichTextImpl as unknown as {\n\tnew (): {\n\t\t$props: AllowedComponentProps &\n\t\t\tComponentCustomProps &\n\t\t\tVNodeProps &\n\t\t\tPrismicRichTextProps;\n\t};\n};\n","import {\n\tAllowedComponentProps,\n\tComponentCustomProps,\n\tcomputed,\n\tConcreteComponent,\n\tDefineComponent,\n\tdefineComponent,\n\tFunctionalComponent,\n\th,\n\tmarkRaw,\n\tPropType,\n\tVNodeProps,\n\twatchEffect,\n} from \"vue\";\n\nimport { Slice } from \"@prismicio/types\";\n\nimport { simplyResolveComponent } from \"../lib/simplyResolveComponent\";\nimport { __PRODUCTION__ } from \"../lib/__PRODUCTION__\";\nimport { usePrismic } from \"../usePrismic\";\n\n/**\n * Returns the type of a `SliceLike` type.\n *\n * @typeParam TSlice - The Slice from which the type will be extracted.\n */\ntype ExtractSliceType<TSlice extends SliceLike> = TSlice extends SliceLikeRestV2\n\t? TSlice[\"slice_type\"]\n\t: TSlice extends SliceLikeGraphQL\n\t? TSlice[\"type\"]\n\t: never;\n\n/**\n * The minimum required properties to represent a Prismic Slice from the Prismic\n * Rest API V2 for the `<SliceZone>` component.\n *\n * If using Prismic's Rest API V2, use the `Slice` export from\n * `@prismicio/types` for a full interface.\n *\n * @typeParam TSliceType - Type name of the Slice.\n */\nexport type SliceLikeRestV2<TSliceType extends string = string> = {\n\tslice_type: Slice<TSliceType>[\"slice_type\"];\n\tid?: string;\n};\n\n/**\n * The minimum required properties to represent a Prismic Slice from the Prismic\n * GraphQL API for the `<SliceZone>` component.\n *\n * @typeParam TSliceType - Type name of the Slice.\n */\nexport type SliceLikeGraphQL<TSliceType extends string = string> = {\n\ttype: Slice<TSliceType>[\"slice_type\"];\n};\n\n/**\n * The minimum required properties to represent a Prismic Slice for the\n * `<SliceZone />` component.\n *\n * If using Prismic's REST API, use the `Slice` export from `@prismicio/types`\n * for a full interface.\n *\n * @typeParam TSliceType - Type name of the Slice\n */\nexport type SliceLike<TSliceType extends string = string> =\n\t| SliceLikeRestV2<TSliceType>\n\t| SliceLikeGraphQL<TSliceType>;\n\n/**\n * A looser version of the `SliceZone` type from `@prismicio/types` using\n * `SliceLike`.\n *\n * If using Prismic's REST API, use the `SliceZone` export from\n * `@prismicio/types` for the full type.\n *\n * @typeParam TSlice - The type(s) of slices in the Slice Zone\n */\nexport type SliceZoneLike<TSlice extends SliceLike = SliceLike> =\n\treadonly TSlice[];\n\n/**\n * Vue props for a component rendering content from a Prismic Slice using the\n * `<SliceZone />` component.\n *\n * @typeParam TSlice - The type(s) of slices in the Slice Zone\n * @typeParam TContext - Arbitrary data passed to `<SliceZone />` and made\n *   available to all Slice components\n */\nexport type SliceComponentProps<\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tTSlice extends SliceLike = any,\n\tTContext = unknown,\n> = {\n\t/**\n\t * Slice data for this component.\n\t */\n\tslice: TSlice;\n\n\t/**\n\t * The index of the Slice in the Slice Zone.\n\t */\n\tindex: number;\n\n\t/**\n\t * All Slices from the Slice Zone to which the Slice belongs.\n\t */\n\t// TODO: We have to keep this list of Slices general due to circular\n\t// reference limtiations. If we had another generic to determine the full\n\t// union of Slice types, it would include TSlice. This causes TypeScript to\n\t// throw a compilation error.\n\tslices: SliceZoneLike<SliceLike>;\n\n\t/**\n\t * Arbitrary data passed to `<SliceZone />` and made available to all Slice\n\t * components.\n\t */\n\tcontext: TContext;\n};\n\n/**\n * Native Vue props for a component rendering content from a Prismic Slice using\n * the `<SliceZone />` component.\n *\n * @typeParam TSlice - The Slice type\n * @typeParam TContext - Arbitrary data passed to `<SliceZone />` and made\n *   available to all Slice components\n */\nexport type DefineComponentSliceComponentProps<\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tTSlice extends SliceLike = any,\n\tTContext = unknown,\n> = {\n\tslice: {\n\t\ttype: PropType<SliceComponentProps<TSlice, TContext>[\"slice\"]>;\n\t\trequired: true;\n\t};\n\tindex: {\n\t\ttype: PropType<SliceComponentProps<TSlice, TContext>[\"index\"]>;\n\t\trequired: true;\n\t};\n\tslices: {\n\t\ttype: PropType<SliceComponentProps<TSlice, TContext>[\"slices\"]>;\n\t\trequired: true;\n\t};\n\tcontext: {\n\t\ttype: PropType<SliceComponentProps<TSlice, TContext>[\"context\"]>;\n\t\trequired: true;\n\t};\n};\n\n/**\n * Gets native Vue props for a component rendering content from a Prismic Slice\n * using the `<SliceZone />` component. Props are: `[\"slice\", \"index\", \"slices\",\n * \"context\"]`\n *\n * @example Defining a new slice component:\n *\n * ```javascript\n * import { getSliceComponentProps } from \"@prismicio/vue\";\n *\n * export default {\n * \tprops: getSliceComponentProps(),\n * };\n * ```\n *\n * @example Defining a new slice component with visual hint:\n *\n * ```javascript\n * import { getSliceComponentProps } from \"@prismicio/vue\";\n *\n * export default {\n * \tprops: getSliceComponentProps([\"slice\", \"index\", \"slices\", \"context\"]),\n * };\n * ```\n *\n * @typeParam TSlice - The Slice type\n * @typeParam TContext - Arbitrary data passed to `<SliceZone />` and made\n *   available to all Slice components\n * @param propsHint - An optional array of prop names used for the sole purpose\n *   of having a visual hint of which props are made available to the slice,\n *   this parameters doesn't have any effect\n *\n * @returns Props object to use with {@link defineComponent}\n */\nexport const getSliceComponentProps = <\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tTSlice extends SliceLike = any,\n\tTContext = unknown,\n>(\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tpropsHint?: [\"slice\", \"index\", \"slices\", \"context\"],\n): DefineComponentSliceComponentProps<TSlice, TContext> => ({\n\tslice: {\n\t\ttype: Object as PropType<SliceComponentProps<TSlice, TContext>[\"slice\"]>,\n\t\trequired: true,\n\t},\n\tindex: {\n\t\ttype: Number as PropType<SliceComponentProps<TSlice, TContext>[\"index\"]>,\n\t\trequired: true,\n\t},\n\tslices: {\n\t\ttype: Array as PropType<SliceComponentProps<TSlice, TContext>[\"slices\"]>,\n\t\trequired: true,\n\t},\n\tcontext: {\n\t\ttype: null as unknown as PropType<\n\t\t\tSliceComponentProps<TSlice, TContext>[\"context\"]\n\t\t>,\n\t\trequired: true,\n\t},\n});\n\n/**\n * A Vue component to be rendered for each instance of its Slice.\n *\n * @typeParam TSlice - The type(s) of slices in the Slice Zone\n * @typeParam TContext - Arbitrary data made available to all Slice components\n */\nexport type SliceComponentType<\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tTSlice extends SliceLike = any,\n\tTContext = unknown,\n> =\n\t| DefineComponent<SliceComponentProps<TSlice, TContext>>\n\t| FunctionalComponent<SliceComponentProps<TSlice, TContext>>;\n\n/**\n * This Slice component can be used as a reminder to provide a proper\n * implementation.\n *\n * This is also the default Vue component rendered when a component mapping\n * cannot be found in `<SliceZone />`.\n */\nexport const TODOSliceComponent = __PRODUCTION__\n\t? ((() => null) as FunctionalComponent<SliceComponentProps>)\n\t: /*#__PURE__*/ (defineComponent({\n\t\t\tname: \"TODOSliceComponent\",\n\t\t\tprops: getSliceComponentProps(),\n\t\t\tsetup(props) {\n\t\t\t\tconst type = computed(() =>\n\t\t\t\t\t\"slice_type\" in props.slice\n\t\t\t\t\t\t? props.slice.slice_type\n\t\t\t\t\t\t: props.slice.type,\n\t\t\t\t);\n\n\t\t\t\twatchEffect(() => {\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t`[SliceZone] Could not find a component for Slice type \"${type.value}\"`,\n\t\t\t\t\t\tprops.slice,\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\treturn () => {\n\t\t\t\t\treturn h(\n\t\t\t\t\t\t\"section\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"data-slice-zone-todo-component\": \"\",\n\t\t\t\t\t\t\t\"data-slice-type\": type.value,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t[`Could not find a component for Slice type \"${type.value}\"`],\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t},\n\t  }) as SliceComponentType);\n\n/**\n * A record of Slice types mapped to Vue components. Each components will be\n * rendered for each instance of their Slice type.\n *\n * @typeParam TSlice - The type(s) of slices in the Slice Zone\n * @typeParam TContext - Arbitrary data made available to all Slice components\n */\nexport type SliceZoneComponents<\n\tTSlice extends SliceLike = SliceLike,\n\tTContext = unknown,\n> =\n\t// This is purposely not wrapped in Partial to ensure a component is provided\n\t// for all Slice types. <SliceZone /> will render a default component if one is\n\t// not provided, but it *should* be a type error if an explicit component is\n\t// missing.\n\t//\n\t// If a developer purposely does not want to provide a component, they can\n\t// assign it to the TODOSliceComponent exported from this package. This\n\t// signals to future developers that it is a placeholder and should be\n\t// implemented.\n\t{\n\t\t[SliceType in ExtractSliceType<TSlice>]:\n\t\t\t| SliceComponentType<Extract<TSlice, SliceLike<SliceType>>, TContext>\n\t\t\t| string;\n\t};\n\n/**\n * Gets an optimized record of Slice types mapped to Vue components. Each\n * components will be rendered for each instance of their Slice type.\n *\n * @remarks\n * This is essentially an helper function to ensure {@link markRaw} is correctly\n * applied on each components, improving performances.\n * @example Defining a slice components:\n *\n * ```javascript\n * import { defineSliceZoneComponents } from \"@prismicio/vue\";\n *\n * export default {\n *   data() {\n *     components: defineSliceZoneComponents({\n *       foo: Foo,\n *       bar: defineAsyncComponent(\n *         () => new Promise((res) => res(Bar)),\n *       ),\n *       baz: \"Baz\",\n *     }),\n *   }\n * };\n * ```\n *\n * @typeParam TSlice - The type(s) of slices in the Slice Zone\n * @typeParam TContext - Arbitrary data made available to all Slice components\n *\n * @param components - {@link SliceZoneComponents}\n *\n * @returns A new optimized record of {@link SliceZoneComponents}\n */\nexport const defineSliceZoneComponents = <\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tTSlice extends SliceLike = any,\n\tTContext = unknown,\n>(\n\tcomponents: SliceZoneComponents<TSlice, TContext>,\n): SliceZoneComponents<TSlice, TContext> => {\n\tconst result = {} as SliceZoneComponents<TSlice, TContext>;\n\n\tlet type: keyof typeof components;\n\tfor (type in components) {\n\t\tconst component = components[type];\n\t\tresult[type] =\n\t\t\ttypeof component === \"string\"\n\t\t\t\t? component\n\t\t\t\t: markRaw(\n\t\t\t\t\t\tcomponent as SliceComponentType<\n\t\t\t\t\t\t\tExtract<TSlice, SliceLike<typeof type>>,\n\t\t\t\t\t\t\tTContext\n\t\t\t\t\t\t>,\n\t\t\t\t  );\n\t}\n\n\treturn result;\n};\n\n/**\n * Arguments for a `<SliceZone>` `resolver` function.\n */\nexport type SliceZoneResolverArgs<TSlice extends SliceLike = SliceLike> = {\n\t/**\n\t * The Slice to resolve to a Vue component..\n\t */\n\tslice: TSlice;\n\n\t/**\n\t * The name of the Slice.\n\t */\n\tsliceName: ExtractSliceType<TSlice>;\n\n\t/**\n\t * The index of the Slice in the Slice Zone.\n\t */\n\ti: number;\n};\n\n/**\n * A function that determines the rendered Vue component for each Slice in the\n * Slice Zone. If a nullish value is returned, the component will fallback to\n * the `components` or `defaultComponent` props to determine the rendered\n * component.\n *\n * @deprecated Use the `components` prop instead.\n *\n * @param args - Arguments for the resolver function.\n *\n * @returns The Vue component to render for a Slice.\n */\nexport type SliceZoneResolver<\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tTSlice extends SliceLike = any,\n\tTContext = unknown,\n> = (\n\targs: SliceZoneResolverArgs<TSlice>,\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => SliceComponentType<any, TContext> | string | undefined | null;\n\n/**\n * Props for `<SliceZone />`.\n *\n * @typeParam TContext - Arbitrary data made available to all Slice components\n */\nexport type SliceZoneProps<TContext = unknown> = {\n\t/**\n\t * List of Slice data from the Slice Zone.\n\t */\n\tslices: SliceZoneLike;\n\n\t/**\n\t * A record mapping Slice types to Vue components.\n\t */\n\tcomponents?: SliceZoneComponents;\n\n\t/**\n\t * A function that determines the rendered Vue component for each Slice in the\n\t * Slice Zone.\n\t *\n\t * @deprecated Use the `components` prop instead.\n\t *\n\t * @param args - Arguments for the resolver function.\n\t *\n\t * @returns The Vue component to render for a Slice.\n\t */\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tresolver?: SliceZoneResolver<any, TContext>;\n\n\t/**\n\t * Arbitrary data made available to all Slice components.\n\t */\n\tcontext?: TContext;\n\n\t/**\n\t * A component or a functional component rendered if a component mapping from\n\t * the `components` prop cannot be found.\n\t *\n\t * @remarks\n\t * Components will be rendered using the {@link SliceComponentProps} interface.\n\t *\n\t * @defaultValue The Slice Zone default component provided to `@prismicio/vue` plugin if configured, otherwise `null` when `process.env.NODE_ENV === \"production\"` else {@link TODOSliceComponent}.\n\t */\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tdefaultComponent?: SliceComponentType<any, TContext>;\n\n\t/**\n\t * An HTML tag name, a component, or a functional component used to wrap the\n\t * output. The Slice Zone is not wrapped by default.\n\t */\n\twrapper?: string | ConcreteComponent;\n};\n\n/**\n * `<SliceZone />` implementation.\n *\n * @internal\n */\nexport const SliceZoneImpl = /*#__PURE__*/ defineComponent({\n\tname: \"SliceZone\",\n\tprops: {\n\t\tslices: {\n\t\t\ttype: Array as PropType<SliceZoneLike>,\n\t\t\trequired: true,\n\t\t},\n\t\tcomponents: {\n\t\t\ttype: Object as PropType<SliceZoneComponents>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t\tresolver: {\n\t\t\ttype: Function as PropType<SliceZoneResolver>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t\tcontext: {\n\t\t\ttype: null,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t\tdefaultComponent: {\n\t\t\ttype: Object as PropType<SliceComponentType>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t\twrapper: {\n\t\t\ttype: [String, Object, Function] as PropType<string | ConcreteComponent>,\n\t\t\tdefault: undefined,\n\t\t\trequired: false,\n\t\t},\n\t},\n\tsetup(props) {\n\t\t// Prevent fatal if user didn't check for field, throws `Invalid prop` warn\n\t\tif (!props.slices) {\n\t\t\treturn () => null;\n\t\t}\n\n\t\tconst { options } = usePrismic();\n\n\t\tconst renderedSlices = computed(() => {\n\t\t\treturn props.slices.map((slice, index) => {\n\t\t\t\tconst type = \"slice_type\" in slice ? slice.slice_type : slice.type;\n\n\t\t\t\tlet component =\n\t\t\t\t\tprops.components && type in props.components\n\t\t\t\t\t\t? props.components[type]\n\t\t\t\t\t\t: props.defaultComponent ||\n\t\t\t\t\t\t  options.components?.sliceZoneDefaultComponent ||\n\t\t\t\t\t\t  TODOSliceComponent;\n\n\t\t\t\t// TODO: Remove `resolver` in v3 in favor of `components`.\n\t\t\t\tif (props.resolver) {\n\t\t\t\t\tconst resolvedComponent = props.resolver({\n\t\t\t\t\t\tslice,\n\t\t\t\t\t\tsliceName: type,\n\t\t\t\t\t\ti: index,\n\t\t\t\t\t});\n\n\t\t\t\t\tif (resolvedComponent) {\n\t\t\t\t\t\tcomponent = resolvedComponent;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst key =\n\t\t\t\t\t\"id\" in slice && slice.id\n\t\t\t\t\t\t? slice.id\n\t\t\t\t\t\t: `${index}-${JSON.stringify(slice)}`;\n\n\t\t\t\tconst p = {\n\t\t\t\t\tkey,\n\t\t\t\t\tslice,\n\t\t\t\t\tindex,\n\t\t\t\t\tcontext: props.context,\n\t\t\t\t\tslices: props.slices,\n\t\t\t\t};\n\n\t\t\t\treturn h(simplyResolveComponent(component as ConcreteComponent), p);\n\t\t\t});\n\t\t});\n\n\t\treturn () => {\n\t\t\tif (props.wrapper) {\n\t\t\t\tconst parent = simplyResolveComponent(props.wrapper);\n\n\t\t\t\tif (typeof parent === \"string\") {\n\t\t\t\t\treturn h(parent, null, renderedSlices.value);\n\t\t\t\t} else {\n\t\t\t\t\treturn h(parent, null, { default: () => renderedSlices.value });\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn renderedSlices.value;\n\t\t\t}\n\t\t};\n\t},\n});\n\n// export the public type for h/tsx inference\n// also to avoid inline import() in generated d.ts files\n/**\n * Component to render a Prismic Slice Zone.\n *\n * @see Component props {@link SliceZoneProps}\n * @see Templating Slice Zones {@link https://prismic.io/docs/technologies/vue-template-content#slices-and-groups}\n */\nexport const SliceZone = SliceZoneImpl as unknown as {\n\tnew (): {\n\t\t$props: AllowedComponentProps &\n\t\t\tComponentCustomProps &\n\t\t\tVNodeProps &\n\t\t\tSliceZoneProps;\n\t};\n};\n","import { App } from \"vue\";\n\nimport {\n\tcreateClient,\n\tpredicate,\n\tcookie,\n\tClient,\n\tFetchLike,\n} from \"@prismicio/client\";\nimport {\n\tasText,\n\tasHTML,\n\tasLink,\n\tasDate,\n\tasImageSrc,\n\tasImageWidthSrcSet,\n\tasImagePixelDensitySrcSet,\n\tdocumentToLinkField,\n} from \"@prismicio/helpers\";\n\nimport {\n\tPrismicEmbed,\n\tPrismicImage,\n\tPrismicLink,\n\tPrismicRichText,\n\tPrismicText,\n\tSliceZone,\n} from \"./components\";\nimport { prismicKey } from \"./injectionSymbols\";\nimport type {\n\tPrismicPlugin,\n\tPrismicPluginClient,\n\tPrismicPluginHelpers,\n\tPrismicPluginOptions,\n} from \"./types\";\n\n/**\n * Creates a `@prismicio/vue` plugin instance that can be used by a Vue app.\n *\n * @param options - {@link PrismicPluginOptions}\n *\n * @returns `@prismicio/vue` plugin instance {@link PrismicPlugin}\n *\n * @see Prismic Official Vue.js documentation: {@link https://prismic.io/docs/technologies/vuejs}\n * @see Plugin repository: {@link https://github.com/prismicio/prismic-vue}\n */\nexport const createPrismic = (options: PrismicPluginOptions): PrismicPlugin => {\n\t// Create plugin client\n\tlet client: Client;\n\tif (options.client) {\n\t\tclient = options.client;\n\t} else {\n\t\tclient = createClient(options.endpoint, {\n\t\t\tfetch: async (endpoint, options) => {\n\t\t\t\tlet fetchFunction: FetchLike;\n\t\t\t\tif (typeof globalThis.fetch === \"function\") {\n\t\t\t\t\t// TODO: Remove after https://github.com/prismicio/prismic-client/issues/254\n\t\t\t\t\tfetchFunction = globalThis.fetch as FetchLike;\n\t\t\t\t} else {\n\t\t\t\t\t// TODO: Remove after https://github.com/prismicio/prismic-client/issues/254\n\t\t\t\t\tfetchFunction = (await import(\"isomorphic-unfetch\"))\n\t\t\t\t\t\t.default as FetchLike;\n\t\t\t\t}\n\n\t\t\t\treturn await fetchFunction(endpoint, options);\n\t\t\t},\n\t\t\t...options.clientConfig,\n\t\t});\n\t}\n\n\tconst prismicClient: PrismicPluginClient = {\n\t\tclient,\n\t\tpredicate,\n\t\tcookie,\n\t};\n\n\t// Create plugin helpers\n\tconst prismicHelpers: PrismicPluginHelpers = {\n\t\tasText,\n\t\tasHTML: (richTextField, linkResolver, htmlSerializer) => {\n\t\t\treturn asHTML(\n\t\t\t\trichTextField,\n\t\t\t\tlinkResolver || options.linkResolver,\n\t\t\t\thtmlSerializer || options.htmlSerializer,\n\t\t\t);\n\t\t},\n\t\tasLink: (linkField, linkResolver) => {\n\t\t\treturn asLink(linkField, linkResolver || options.linkResolver);\n\t\t},\n\t\tasDate,\n\t\tasImageSrc,\n\t\tasImageWidthSrcSet,\n\t\tasImagePixelDensitySrcSet,\n\t\tdocumentToLinkField,\n\t};\n\n\t// Create plugin interface\n\tconst prismic: PrismicPlugin = {\n\t\toptions,\n\n\t\t...prismicClient,\n\t\t...prismicHelpers,\n\n\t\tinstall(app: App): void {\n\t\t\tapp.provide(prismicKey, this);\n\t\t\tapp.config.globalProperties.$prismic = this;\n\n\t\t\tif (options.injectComponents !== false) {\n\t\t\t\tapp.component(PrismicLink.name, PrismicLink);\n\t\t\t\tapp.component(PrismicEmbed.name, PrismicEmbed);\n\t\t\t\tapp.component(PrismicImage.name, PrismicImage);\n\t\t\t\tapp.component(PrismicText.name, PrismicText);\n\t\t\t\tapp.component(PrismicRichText.name, PrismicRichText);\n\t\t\t\tapp.component(SliceZone.name, SliceZone);\n\t\t\t}\n\t\t},\n\t};\n\n\treturn prismic;\n};\n","import type { App, ConcreteComponent, Ref } from \"vue\";\n\nimport type {\n\tClient,\n\tClientConfig,\n\tcookie,\n\tpredicate,\n} from \"@prismicio/client\";\nimport type {\n\tasText,\n\tasHTML,\n\tasLink,\n\tasDate,\n\tdocumentToLinkField,\n\tHTMLFunctionSerializer,\n\tHTMLMapSerializer,\n\tLinkResolverFunction,\n\tasImageSrc,\n\tasImageWidthSrcSet,\n\tasImagePixelDensitySrcSet,\n} from \"@prismicio/helpers\";\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n// Imports for @link references:\n\nimport type { RouterLink } from \"vue-router\";\n\nimport type {\n\tSliceComponentProps,\n\tSliceComponentType,\n\tTODOSliceComponent,\n} from \"./components/SliceZone\";\n\nimport type { usePrismicDocuments } from \"./composables\";\n\n/* eslint-enable @typescript-eslint/no-unused-vars */\n\n/**\n * Options used by `@prismicio/vue` components.\n */\ntype PrismicPluginComponentsOptions = {\n\t/**\n\t * Value of the `rel` attribute to use on links rendered with\n\t * `target=\"_blank\"`\n\t *\n\t * @defaultValue `\"noopener noreferrer\"`\n\t */\n\tlinkBlankTargetRelAttribute?: string;\n\n\t/**\n\t * An HTML tag name, a component, or a functional component used to render\n\t * internal links.\n\t *\n\t * @remarks\n\t * HTML tag names will be rendered using the anchor tag interface (`href`,\n\t * `target`, and `rel` attributes).\n\t * @remarks\n\t * Components will be rendered using Vue Router {@link RouterLink} interface\n\t * (`to` props).\n\t * @defaultValue {@link RouterLink}\n\t */\n\tlinkInternalComponent?: string | ConcreteComponent;\n\n\t/**\n\t * An HTML tag name, a component, or a functional component used to render\n\t * external links.\n\t *\n\t * @remarks\n\t * HTML tag names will be rendered using the anchor tag interface (`href`,\n\t * `target`, and `rel` attributes).\n\t * @remarks\n\t * Components will be rendered using Vue Router {@link RouterLink} interface\n\t * (`to` props).\n\t * @defaultValue `\"a\"`\n\t */\n\tlinkExternalComponent?: string | ConcreteComponent;\n\n\t/**\n\t * An HTML tag name, a component, or a functional component used to render\n\t * images.\n\t *\n\t * @remarks\n\t * HTML tag names and components will be rendered using the `img` tag\n\t * interface (`src` and `alt` attribute). Components will also receive an\n\t * additional `copyright` props.\n\t * @defaultValue `\"img\"`\n\t */\n\timageComponent?: string | ConcreteComponent;\n\n\t/**\n\t * Default widths to use when rendering an image with `widths=\"defaults\"`\n\t *\n\t * @remarks\n\t * Consider configuring image widths within your content type definition and\n\t * using `widths=\"auto\"` instead to give content writers the ability to crop\n\t * images in the editor.\n\t * @defaultValue `@prismicio/helpers` defaults\n\t */\n\timageWidthSrcSetDefaults?: number[];\n\n\t/**\n\t * Default pixel densities to use when rendering an image with\n\t * `pixel-densities=\"defaults\"`\n\t *\n\t * @defaultValue `@prismicio/helpers` defaults\n\t */\n\timagePixelDensitySrcSetDefaults?: number[];\n\n\t/**\n\t * A component or a functional component rendered if a component mapping from\n\t * the `components` prop cannot be found.\n\t *\n\t * @remarks\n\t * Components will be rendered using the {@link SliceComponentProps} interface.\n\t *\n\t * @defaultValue `null` when `process.env.NODE_ENV === \"production\"` else {@link TODOSliceComponent}\n\t */\n\tsliceZoneDefaultComponent?: SliceComponentType;\n};\n\n/**\n * Common options supported by `@prismicio/vue` plugin.\n */\ntype PrismicPluginOptionsBase = {\n\t/**\n\t * An optional link resolver function used to resolve links to Prismic\n\t * documents when not using the route resolver parameter with\n\t * `@prismicio/client`.\n\t *\n\t * @see Link resolver documentation {@link https://prismic.io/docs/core-concepts/link-resolver-route-resolver#link-resolver}\n\t */\n\tlinkResolver?: LinkResolverFunction;\n\n\t/**\n\t * An optional HTML serializer to customize the way rich text fields are\n\t * rendered.\n\t *\n\t * @see HTML serializer documentation {@link https://prismic.io/docs/core-concepts/html-serializer}\n\t */\n\thtmlSerializer?: HTMLFunctionSerializer | HTMLMapSerializer;\n\n\t/**\n\t * Whether or not to inject components globally.\n\t *\n\t * @defaultValue `true`\n\t */\n\tinjectComponents?: boolean;\n\n\t/**\n\t * Options used by Prismic Vue components.\n\t *\n\t * @see Components options {@link PrismicPluginComponentsOptions}\n\t */\n\tcomponents?: PrismicPluginComponentsOptions;\n};\n\n/**\n * Options to init `@prismicio/vue` plugin with a client instance.\n *\n * @see {@link PrismicPluginOptionsBase} for shared options\n */\ntype PrismicPluginOptionsWithClient = PrismicPluginOptionsBase & {\n\t/**\n\t * A `@prismicio/client` instance used to fetch content from a Prismic\n\t * repository to configure the plugin with.\n\t *\n\t * @remarks\n\t * The client will be used by `@prismicio/vue` composables, such as\n\t * {@link usePrismicDocuments} and exposed through `this.$prismic.client` and\n\t * `usePrismic().client`.\n\t * @see Prismic client documentation {@link https://prismic.io/docs/technologies/javascript}\n\t */\n\tclient: Client;\n\n\t/**\n\t * Ensures type union is a strict or.\n\t *\n\t * @internal\n\t */\n\tendpoint?: never;\n\n\t/**\n\t * Ensures type union is a strict or.\n\t *\n\t * @internal\n\t */\n\tclientConfig?: never;\n};\n\n/**\n * Options to init `@prismicio/vue` plugin with a repository ID or API endpoint.\n *\n * @see {@link PrismicPluginOptionsBase} for shared options\n */\ntype PrismicPluginOptionsWithEndpoint = PrismicPluginOptionsBase & {\n\t/**\n\t * A Prismic repository endpoint to init the plugin's `@prismicio/client`\n\t * instance used to fetch content from a Prismic repository with.\n\t *\n\t * @remarks\n\t * Said client will be used by `@prismicio/vue` composables, such as\n\t * {@link usePrismicDocuments} and exposed through `this.$prismic.client` and\n\t * `usePrismic().client`.\n\t * @example A repository ID:\n\t *\n\t *     \"my-repo\";\n\t *\n\t * @example A full repository endpoint:\n\t *\n\t *     \"https://my-repo.cdn.prismic.io/api/v2\";\n\t *\n\t * @see Prismic client documentation {@link https://prismic.io/docs/technologies/javascript}\n\t */\n\tendpoint: string;\n\n\t/**\n\t * An optional object to configure `@prismicio/client` instance further.\n\t *\n\t * @example Accessing a private private repository:\n\t *\n\t * ```javascript\n\t * {\n\t * \t\"accessToken\": \"abc\"\n\t * }\n\t * ```\n\t *\n\t * @example Using a route resolver:\n\t *\n\t * ```javascript\n\t * {\n\t * \t\"defaultParams\": {\n\t * \t\t\"routes\": [\n\t * \t\t\t{\n\t * \t\t\t\t\"type\": \"page\",\n\t * \t\t\t\t\"path\": \"/:uid\"\n\t * \t\t\t},\n\t * \t\t\t{\n\t * \t\t\t\t\"type\": \"post\",\n\t * \t\t\t\t\"path\": \"/blog/:uid\"\n\t * \t\t\t}\n\t * \t\t]\n\t * \t}\n\t * }\n\t * ```\n\t *\n\t * @see Prismic client documentation {@link https://prismic.io/docs/technologies/javascript}\n\t * @see Route resolver documentation {@link https://prismic.io/docs/core-concepts/link-resolver-route-resolver#route-resolver}\n\t */\n\tclientConfig?: ClientConfig;\n\n\t/**\n\t * Ensures type union is a strict or.\n\t *\n\t * @internal\n\t */\n\tclient?: never;\n};\n\n/**\n * `@prismicio/vue` plugin options.\n *\n * @see Prismic Official Vue.js documentation: {@link https://prismic.io/docs/technologies/vuejs}\n * @see Plugin repository: {@link https://github.com/prismicio/prismic-vue}\n */\nexport type PrismicPluginOptions =\n\t| PrismicPluginOptionsWithClient\n\t| PrismicPluginOptionsWithEndpoint;\n\n/**\n * `@prismicio/client` related methods and properties exposed by\n * `@prismicio/vue` plugin and accessible through `this.$prismic` and\n * `usePrismic()`.\n */\nexport type PrismicPluginClient = {\n\t/**\n\t * A `@prismicio/client` instance.\n\t */\n\tclient: Client;\n\n\t/**\n\t * Query predicates from `@prismicio/client`.\n\t */\n\tpredicate: typeof predicate;\n\n\t/**\n\t * Prismic cookies from `@prismicio/client`.\n\t */\n\tcookie: typeof cookie;\n};\n\n/**\n * `@prismicio/helpers` related methods exposed by `@prismicio/vue` plugin and\n * accessible through `this.$prismic` and `usePrismic()`.\n */\nexport type PrismicPluginHelpers = {\n\t/**\n\t * Serializes a rich text or title field to a plain text string. This is\n\t * `@prismicio/helpers` {@link asText} function.\n\t *\n\t * @see Templating rich text and title fields {@link https://prismic.io/docs/technologies/vue-template-content#rich-text-and-titles}\n\t */\n\tasText: typeof asText;\n\n\t/**\n\t * Serializes a rich text or title field to an HTML string. This is\n\t * `@prismicio/helpers` {@link asHTML} function.\n\t *\n\t * @remarks\n\t * If no `linkResolver` is provided the function will use the one provided to\n\t * the plugin at {@link PrismicPluginOptions.linkResolver} if available.\n\t * @remarks\n\t * If no `htmlSerializer` is provided the function will use the one provided\n\t * to the plugin at {@link PrismicPluginOptions.htmlSerializer} if available.\n\t * @see Templating rich text and title fields {@link https://prismic.io/docs/technologies/vue-template-content#rich-text-and-titles}\n\t */\n\tasHTML: typeof asHTML;\n\n\t/**\n\t * Resolves any type of link field or document to a URL. This is\n\t * `@prismicio/helpers` {@link asLink} function.\n\t *\n\t * @remarks\n\t * If no `linkResolver` is provided the function will use the one provided to\n\t * the plugin at {@link PrismicPluginOptions.linkResolver} if available.\n\t * @see Templating link fields {@link https://prismic.io/docs/technologies/vue-template-content#links-and-content-relationships}\n\t */\n\tasLink: (\n\t\tlinkField: Parameters<typeof asLink>[0],\n\t\tlinkResolver?: LinkResolverFunction,\n\t) => string | null;\n\n\t/**\n\t * Transforms a date or timestamp field into a JavaScript Date object. This is\n\t * `@prismicio/helpers` {@link asDate} function.\n\t */\n\tasDate: typeof asDate;\n\n\t/**\n\t * Returns the URL of an Image field with optional image transformations (via\n\t * Imgix URL parameters). This is `@prismicio/helpers` {@link asImageSrc}\n\t * function.\n\t */\n\tasImageSrc: typeof asImageSrc;\n\n\t/**\n\t * Creates a width-based `srcset` from an Image field with optional image\n\t * transformations (via Imgix URL parameters). This is `@prismicio/helpers`\n\t * {@link asImageWidthSrcSet} function.\n\t */\n\tasImageWidthSrcSet: typeof asImageWidthSrcSet;\n\n\t/**\n\t * Creates a pixel-density-based `srcset` from an Image field with optional\n\t * image transformations (via Imgix URL parameters). This is\n\t * `@prismicio/helpers` {@link asImagePixelDensitySrcSet} function.\n\t */\n\tasImagePixelDensitySrcSet: typeof asImagePixelDensitySrcSet;\n\n\t/**\n\t * Converts a document into a link field. This is `@prismicio/helpers`\n\t * {@link documentToLinkField} function.\n\t *\n\t * @internal\n\t */\n\tdocumentToLinkField: typeof documentToLinkField;\n};\n\n/**\n * Methods and properties exposed by `@prismicio/vue` plugin and accessible\n * through `this.$prismic` and `usePrismic()`.\n */\nexport type PrismicPlugin = {\n\t/**\n\t * Options uses to initialize the plugin.\n\t *\n\t * @see `@prismicio/vue` plugin options {@link PrismicPluginOptions}\n\t */\n\treadonly options: PrismicPluginOptions;\n\n\t/**\n\t * `@prismicio/vue` plugin install function used by Vue.\n\t *\n\t * @internal\n\t */\n\tinstall: (app: App) => void;\n} & PrismicPluginClient &\n\tPrismicPluginHelpers;\n\n/**\n * States of a `@prismicio/client` composable.\n */\nexport const enum PrismicClientComposableState {\n\t/**\n\t * The composable has not started fetching.\n\t */\n\tIdle = \"idle\",\n\n\t/**\n\t * The composable is fetching data.\n\t */\n\tPending = \"pending\",\n\n\t/**\n\t * The composable sucessfully fetched data.\n\t */\n\tSuccess = \"success\",\n\n\t/**\n\t * The composable failed to fetch data.\n\t */\n\tError = \"error\",\n}\n\n// Helpers\n\n/**\n * Type to transform a static object into one that allows passing Refs as\n * values.\n *\n * @internal\n */\nexport type VueUseOptions<T> = {\n\t[K in keyof T]: Ref<T[K]> | T[K];\n};\n\n/**\n * Type to transform a static tuple into one that allows passing Refs as values.\n *\n * @internal\n */\nexport type VueUseParameters<T> = {\n\t[K in keyof T]: T extends number ? Ref<T[K]> | T[K] : T[K];\n};\n","import { isRef, ref, Ref, shallowRef, unref, watch } from \"vue\";\n\nimport {\n\tClient,\n\tForbiddenError,\n\tParsingError,\n\tPrismicError,\n} from \"@prismicio/client\";\n\nimport { usePrismic } from \"./usePrismic\";\nimport { PrismicClientComposableState, VueUseParameters } from \"./types\";\n\n// Helpers\ntype UnwrapPromise<T> = T extends Promise<infer U> ? U : T;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ClientMethodLike = (...args: any[]) => Promise<any> | any;\ntype ClientMethods = typeof Client.prototype;\ntype ClientError = PrismicError<unknown> | ParsingError | ForbiddenError;\n\n// Interfaces\n\n/**\n * @internal\n */\nexport type ClientMethodParameters<TMethodName extends keyof ClientMethods> =\n\tClientMethods[TMethodName] extends ClientMethodLike\n\t\t? VueUseParameters<Parameters<ClientMethods[TMethodName]>>\n\t\t: never;\n\n/**\n * @internal\n */\nexport type ClientMethodReturnType<TMethodName extends keyof ClientMethods> =\n\tClientMethods[TMethodName] extends ClientMethodLike\n\t\t? ReturnType<ClientMethods[TMethodName]>\n\t\t: never;\n\n/**\n * @internal\n */\nexport type ComposableOnlyParameters = {\n\tclient?: Ref<Client> | Client;\n};\n\n/**\n * The return type of a `@prismicio/client` Vue composable.\n *\n * @typeParam TData - The expected format of the `data` property of the returned\n *   object\n */\nexport type ClientComposableReturnType<TData = unknown> = {\n\t/**\n\t * The current state of the composable's client method call.\n\t */\n\tstate: Ref<PrismicClientComposableState>;\n\n\t/**\n\t * Data returned by the client.\n\t */\n\tdata: Ref<TData | null>;\n\n\t/**\n\t * Error returned by the composable's client method call if in an errror\n\t * state.\n\t */\n\terror: Ref<ClientError | Error | null>;\n\n\t/**\n\t * Perform the composable's client method call again.\n\t */\n\trefresh: () => Promise<void>;\n};\n\n/**\n * Determines if a value is a `@prismicio/client` params object.\n *\n * @param value - The value to check\n *\n * @returns `true` if `value` is a `@prismicio/client` params object, `false`\n *   otherwise\n */\nconst isParams = (\n\tvalue: unknown,\n): value is ClientMethodParameters<\"get\">[0] & ComposableOnlyParameters => {\n\t// This is a *very* naive check.\n\treturn typeof value === \"object\" && value !== null && !Array.isArray(value);\n};\n\n/**\n * A low level Vue composable that uses provided method name on plugin or\n * provided client with given arguments. The composable has its own internal\n * state manager to report async status, such as pending or error statuses.\n *\n * @typeParam TClientMethodName - A method name from `@prismicio/client`\n * @typeParam TClientMethodArguments - The method expected arguments\n * @typeParam TClientMethodReturnType - The method expected return type\n *\n * @param method - The `@prismicio/client` method name to use\n * @param args - The arguments to use with requested method\n *\n * @returns The composable payload {@link ClientComposableReturnType}\n *\n * @internal\n */\nexport const useStatefulPrismicClientMethod = <\n\tTClientMethodName extends keyof ClientMethods,\n\tTClientMethodArguments extends ClientMethodParameters<TClientMethodName>,\n\tTClientMethodReturnType extends UnwrapPromise<\n\t\tClientMethodReturnType<TClientMethodName>\n\t>,\n>(\n\tmethodName: TClientMethodName,\n\targs: TClientMethodArguments,\n): ClientComposableReturnType<TClientMethodReturnType> => {\n\tconst { client } = usePrismic();\n\n\tconst state = ref<PrismicClientComposableState>(\n\t\tPrismicClientComposableState.Idle,\n\t);\n\tconst data = shallowRef<TClientMethodReturnType | null>(null);\n\tconst error = ref<ClientError | Error | null>(null);\n\tconst refresh = async (): Promise<void> => {\n\t\tconst lastArg = unref(args[args.length - 1]);\n\t\tconst { client: explicitClient, ...params } = isParams(lastArg)\n\t\t\t? (lastArg as ClientMethodParameters<\"get\">[0] & ComposableOnlyParameters)\n\t\t\t: ({} as ComposableOnlyParameters);\n\t\tconst argsWithoutParams = isParams(lastArg) ? args.slice(0, -1) : args;\n\n\t\tstate.value = PrismicClientComposableState.Pending;\n\t\tdata.value = null;\n\t\terror.value = null;\n\t\ttry {\n\t\t\tdata.value = await (\n\t\t\t\t(unref(explicitClient) || client)[methodName] as ClientMethodLike\n\t\t\t)(\n\t\t\t\t...argsWithoutParams.map((arg: Ref<unknown> | unknown) => unref(arg)),\n\t\t\t\tparams,\n\t\t\t);\n\t\t\tstate.value = PrismicClientComposableState.Success;\n\t\t} catch (err) {\n\t\t\tstate.value = PrismicClientComposableState.Error;\n\t\t\terror.value = err as ClientError | Error;\n\t\t}\n\t};\n\n\t// Watch reactive args\n\tconst refArgs = args.filter((arg) => isRef(arg));\n\tif (refArgs.length) {\n\t\twatch(refArgs, refresh, { deep: true });\n\t}\n\n\t// Fetch once\n\trefresh();\n\n\treturn { state, data, error, refresh };\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n\n// Imports for @link references:\n\nimport type { Client } from \"@prismicio/client\";\n\n/* eslint-enable @typescript-eslint/no-unused-vars */\n\nimport { PrismicDocument, Query } from \"@prismicio/types\";\n\nimport {\n\tClientMethodParameters,\n\tClientComposableReturnType,\n\tuseStatefulPrismicClientMethod,\n\tComposableOnlyParameters,\n} from \"./useStatefulPrismicClientMethod\";\n\n// Composables\n\n/**\n * A composable that queries content from the Prismic repository.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param params - Parameters to filter, sort, and paginate results\n *\n * @returns The composable payload {@link ClientComposableReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link Client.get}\n */\nexport const usePrismicDocuments = <TDocument extends PrismicDocument>(\n\t...args: [\n\t\tparams?: ClientMethodParameters<\"get\">[0] & ComposableOnlyParameters,\n\t]\n): ClientComposableReturnType<Query<TDocument>> =>\n\tuseStatefulPrismicClientMethod(\"get\", args);\n\n/**\n * A composable that queries content from the Prismic repository and returns\n * only the first result, if any.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of the Prismic document returned\n *\n * @param params - Parameters to filter, sort, and paginate results\n *\n * @returns The composable payload {@link ClientComposableReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link Client.getFirst}\n */\nexport const useFirstPrismicDocument = <TDocument extends PrismicDocument>(\n\t...args: [\n\t\tparams?: ClientMethodParameters<\"getFirst\">[0] & ComposableOnlyParameters,\n\t]\n): ClientComposableReturnType<TDocument> =>\n\tuseStatefulPrismicClientMethod(\"getFirst\", args);\n\n/**\n * A composable that queries a document from the Prismic repository with a\n * specific ID.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of the Prismic document returned\n *\n * @param id - ID of the document\n * @param params - Parameters to filter, sort, and paginate results\n *\n * @returns The composable payload {@link ClientComposableReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link Client.getByID}\n */\nexport const usePrismicDocumentByID = <TDocument extends PrismicDocument>(\n\t...args: [\n\t\tid: ClientMethodParameters<\"getByID\">[0],\n\t\tparams?: ClientMethodParameters<\"getByID\">[1] & ComposableOnlyParameters,\n\t]\n): ClientComposableReturnType<TDocument> =>\n\tuseStatefulPrismicClientMethod(\"getByID\", args);\n\n/**\n * A composable that queries documents from the Prismic repository with specific\n * IDs.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param ids - A list of document IDs\n * @param params - Parameters to filter, sort, and paginate results\n *\n * @returns The composable payload {@link ClientComposableReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link Client.getByIDs}\n */\nexport const usePrismicDocumentsByIDs = <TDocument extends PrismicDocument>(\n\t...args: [\n\t\tids: ClientMethodParameters<\"getByIDs\">[0],\n\t\tparams?: ClientMethodParameters<\"getByIDs\">[1] & ComposableOnlyParameters,\n\t]\n): ClientComposableReturnType<Query<TDocument>> =>\n\tuseStatefulPrismicClientMethod(\"getByIDs\", args);\n\n/**\n * A composable that queries all documents from the Prismic repository with\n * specific IDs.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param ids - A list of document IDs\n * @param params - Parameters to filter and sort results\n *\n * @returns The composable payload {@link ClientComposableReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link Client.getAllByIDs}\n */\nexport const useAllPrismicDocumentsByIDs = <TDocument extends PrismicDocument>(\n\t...args: [\n\t\tids: ClientMethodParameters<\"getAllByIDs\">[0],\n\t\tparams?: ClientMethodParameters<\"getAllByIDs\">[1] &\n\t\t\tComposableOnlyParameters,\n\t]\n): ClientComposableReturnType<TDocument[]> =>\n\tuseStatefulPrismicClientMethod(\"getAllByIDs\", args);\n\n/**\n * A composable that queries a document from the Prismic repository with a\n * specific UID and Custom Type.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of the Prismic document returned\n *\n * @param documentType - The API ID of the document's Custom Type\n * @param uid - UID of the document\n * @param params - Parameters to filter, sort, and paginate results\n *\n * @returns The composable payload {@link ClientComposableReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link Client.getByUID}\n */\nexport const usePrismicDocumentByUID = <TDocument extends PrismicDocument>(\n\t...args: [\n\t\tdocumentType: ClientMethodParameters<\"getByUID\">[0],\n\t\tuid: ClientMethodParameters<\"getByUID\">[1],\n\t\tparams?: ClientMethodParameters<\"getByUID\">[2] & ComposableOnlyParameters,\n\t]\n): ClientComposableReturnType<TDocument> =>\n\tuseStatefulPrismicClientMethod(\"getByUID\", args);\n\n/**\n * A composable that queries documents from the Prismic repository with specific\n * UIDs.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param documentType - The API ID of the document's Custom Type\n * @param uids - A list of document UIDs\n * @param params - Parameters to filter, sort, and paginate results\n *\n * @returns The composable payload {@link ClientComposableReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link Client.getByIDs}\n */\nexport const usePrismicDocumentsByUIDs = <TDocument extends PrismicDocument>(\n\t...args: [\n\t\tdocumentType: ClientMethodParameters<\"getByUIDs\">[0],\n\t\tuids: ClientMethodParameters<\"getByUIDs\">[1],\n\t\tparams?: ClientMethodParameters<\"getByUIDs\">[2] & ComposableOnlyParameters,\n\t]\n): ClientComposableReturnType<Query<TDocument>> =>\n\tuseStatefulPrismicClientMethod(\"getByUIDs\", args);\n\n/**\n * A composable that queries all documents from the Prismic repository with\n * specific UIDs.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param documentType - The API ID of the document's Custom Type\n * @param uids - A list of document UIDs\n * @param params - Parameters to filter and sort results\n *\n * @returns The composable payload {@link ClientComposableReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link Client.getAllByIDs}\n */\nexport const useAllPrismicDocumentsByUIDs = <TDocument extends PrismicDocument>(\n\t...args: [\n\t\tdocumentType: ClientMethodParameters<\"getAllByUIDs\">[0],\n\t\tids: ClientMethodParameters<\"getAllByUIDs\">[1],\n\t\tparams?: ClientMethodParameters<\"getAllByUIDs\">[2] &\n\t\t\tComposableOnlyParameters,\n\t]\n): ClientComposableReturnType<TDocument[]> =>\n\tuseStatefulPrismicClientMethod(\"getAllByUIDs\", args);\n\n/**\n * A composable that queries a singleton document from the Prismic repository\n * for a specific Custom Type.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of the Prismic document returned\n *\n * @param documentType - The API ID of the singleton Custom Type\n * @param params - Parameters to filter, sort, and paginate results\n *\n * @returns The composable payload {@link ClientComposableReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link Client.getSingle}\n */\nexport const useSinglePrismicDocument = <TDocument extends PrismicDocument>(\n\t...args: [\n\t\tdocumentType: ClientMethodParameters<\"getSingle\">[0],\n\t\tparams?: ClientMethodParameters<\"getSingle\">[1] & ComposableOnlyParameters,\n\t]\n): ClientComposableReturnType<TDocument> =>\n\tuseStatefulPrismicClientMethod(\"getSingle\", args);\n\n/**\n * A composable that queries documents from the Prismic repository for a\n * specific Custom Type.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param documentType - The API ID of the Custom Type\n * @param params - Parameters to filter, sort, and paginate results\n *\n * @returns The composable payload {@link ClientComposableReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link Client.getByType}\n */\nexport const usePrismicDocumentsByType = <TDocument extends PrismicDocument>(\n\t...args: [\n\t\tdocumentType: ClientMethodParameters<\"getByType\">[0],\n\t\tparams?: ClientMethodParameters<\"getByType\">[1] & ComposableOnlyParameters,\n\t]\n): ClientComposableReturnType<Query<TDocument>> =>\n\tuseStatefulPrismicClientMethod(\"getByType\", args);\n\n/**\n * A composable that queries all documents from the Prismic repository for a\n * specific Custom Type.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param documentType - The API ID of the Custom Type\n * @param params - Parameters to filter and sort results\n *\n * @returns The composable payload {@link ClientComposableReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link Client.getAllByType}\n */\nexport const useAllPrismicDocumentsByType = <TDocument extends PrismicDocument>(\n\t...args: [\n\t\tdocumentType: ClientMethodParameters<\"getAllByType\">[0],\n\t\tparams?: ClientMethodParameters<\"getAllByType\">[1] &\n\t\t\tComposableOnlyParameters,\n\t]\n): ClientComposableReturnType<TDocument[]> =>\n\tuseStatefulPrismicClientMethod(\"getAllByType\", args);\n\n/**\n * A composable that queries documents from the Prismic repository with a\n * specific tag.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param tag - The tag that must be included on a document\n * @param params - Parameters to filter, sort, and paginate results\n *\n * @returns The composable payload {@link ClientComposableReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link Client.getByTag}\n */\nexport const usePrismicDocumentsByTag = <TDocument extends PrismicDocument>(\n\t...args: [\n\t\ttag: ClientMethodParameters<\"getByTag\">[0],\n\t\tparams?: ClientMethodParameters<\"getByTag\">[1] & ComposableOnlyParameters,\n\t]\n): ClientComposableReturnType<Query<TDocument>> =>\n\tuseStatefulPrismicClientMethod(\"getByTag\", args);\n\n/**\n * A composable that queries all documents from the Prismic repository with a\n * specific tag.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param tag - The tag that must be included on a document\n * @param params - Parameters to filter and sort results\n *\n * @returns The composable payload {@link ClientComposableReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link Client.getAllByTag}\n */\nexport const useAllPrismicDocumentsByTag = <TDocument extends PrismicDocument>(\n\t...args: [\n\t\ttag: ClientMethodParameters<\"getAllByTag\">[0],\n\t\tparams?: ClientMethodParameters<\"getAllByTag\">[1] &\n\t\t\tComposableOnlyParameters,\n\t]\n): ClientComposableReturnType<TDocument[]> =>\n\tuseStatefulPrismicClientMethod(\"getAllByTag\", args);\n\n/**\n * A composable that queries documents from the Prismic repository with specific\n * tags. A document must be tagged with all of the queried tags to be included.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param tags - A list of tags that must be included on a document\n * @param params - Parameters to filter, sort, and paginate results\n *\n * @returns The composable payload {@link ClientComposableReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link Client.getByTags}\n */\nexport const usePrismicDocumentsByEveryTag = <\n\tTDocument extends PrismicDocument,\n>(\n\t...args: [\n\t\ttags: ClientMethodParameters<\"getByEveryTag\">[0],\n\t\tparams?: ClientMethodParameters<\"getByEveryTag\">[1] &\n\t\t\tComposableOnlyParameters,\n\t]\n): ClientComposableReturnType<Query<TDocument>> =>\n\tuseStatefulPrismicClientMethod(\"getByEveryTag\", args);\n\n/**\n * A composable that queries all documents from the Prismic repository with\n * specific tags. A document must be tagged with all of the queried tags to be\n * included.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param tags - A list of tags that must be included on a document\n * @param params - Parameters to filter and sort results\n *\n * @returns The composable payload {@link ClientComposableReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link Client.getAllByTags}\n */\nexport const useAllPrismicDocumentsByEveryTag = <\n\tTDocument extends PrismicDocument,\n>(\n\t...args: [\n\t\ttags: ClientMethodParameters<\"getAllByEveryTag\">[0],\n\t\tparams?: ClientMethodParameters<\"getAllByEveryTag\">[1] &\n\t\t\tComposableOnlyParameters,\n\t]\n): ClientComposableReturnType<TDocument[]> =>\n\tuseStatefulPrismicClientMethod(\"getAllByEveryTag\", args);\n\n/**\n * A composable that queries documents from the Prismic repository with specific\n * tags. A document must be tagged with at least one of the queried tags to be\n * included.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param tags - A list of tags that must be included on a document\n * @param params - Parameters to filter, sort, and paginate results\n *\n * @returns The composable payload {@link ClientComposableReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link Client.getByTags}\n */\nexport const usePrismicDocumentsBySomeTags = <\n\tTDocument extends PrismicDocument,\n>(\n\t...args: [\n\t\ttags: ClientMethodParameters<\"getBySomeTags\">[0],\n\t\tparams?: ClientMethodParameters<\"getBySomeTags\">[1] &\n\t\t\tComposableOnlyParameters,\n\t]\n): ClientComposableReturnType<Query<TDocument>> =>\n\tuseStatefulPrismicClientMethod(\"getBySomeTags\", args);\n\n/**\n * A composable that queries all documents from the Prismic repository with\n * specific tags. A document must be tagged with at least one of the queried\n * tags to be included.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param tags - A list of tags that must be included on a document\n * @param params - Parameters to filter and sort results\n *\n * @returns The composable payload {@link ClientComposableReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link Client.getAllByTags}\n */\nexport const useAllPrismicDocumentsBySomeTags = <\n\tTDocument extends PrismicDocument,\n>(\n\t...args: [\n\t\ttags: ClientMethodParameters<\"getAllBySomeTags\">[0],\n\t\tparams?: ClientMethodParameters<\"getAllBySomeTags\">[1] &\n\t\t\tComposableOnlyParameters,\n\t]\n): ClientComposableReturnType<TDocument[]> =>\n\tuseStatefulPrismicClientMethod(\"getAllBySomeTags\", args);\n\n/**\n * **IMPORTANT**: Avoid using `dangerouslyUseAllPrismicDocuments` as it may be\n * slower and require more resources than other composables. Prefer using other\n * composables that filter by predicates such as\n * `useAllPrismicDocumentsByType`.\n *\n * A composable that queries content from the Prismic repository and returns all\n * matching content. If no predicates are provided, all documents will be\n * fetched.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param params - Parameters to filter and sort results\n *\n * @returns The composable payload {@link ClientComposableReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link Client.getAll}\n */\nexport const dangerouslyUseAllPrismicDocuments = <\n\tTDocument extends PrismicDocument,\n>(\n\t...args: [\n\t\tparams?: ClientMethodParameters<\"dangerouslyGetAll\">[0] &\n\t\t\tComposableOnlyParameters,\n\t]\n): ClientComposableReturnType<TDocument[]> =>\n\tuseStatefulPrismicClientMethod(\"dangerouslyGetAll\", args);\n"],"names":["defaultWrapper","target","rel","options","PrismicClientComposableState"],"mappings":"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"}