import * as vue from 'vue';
import { PropType, DefineComponent, FunctionalComponent, VNodeProps, AllowedComponentProps, ComponentCustomProps, ConcreteComponent, App, Ref, ComputedRef, InjectionKey } from 'vue';
import * as _prismicio_client from '@prismicio/client';
import { Client, ClientConfig, predicate, cookie, PrismicError, ParsingError, ForbiddenError } from '@prismicio/client';
import { asText, asHTML, asLink, LinkResolverFunction, asDate, asImageSrc, asImageWidthSrcSet, asImagePixelDensitySrcSet, documentToLinkField, HTMLFunctionSerializer, HTMLMapSerializer } from '@prismicio/helpers';
import { Slice, EmbedField, ImageField, LinkField, PrismicDocument, RichTextField, Query } from '@prismicio/types';

/**
 * Returns the type of a `SliceLike` type.
 *
 * @typeParam TSlice - The Slice from which the type will be extracted.
 */
declare type ExtractSliceType<TSlice extends SliceLike> = TSlice extends SliceLikeRestV2 ? TSlice["slice_type"] : TSlice extends SliceLikeGraphQL ? TSlice["type"] : never;
/**
 * The minimum required properties to represent a Prismic Slice from the Prismic
 * Rest API V2 for the `<SliceZone>` component.
 *
 * If using Prismic's Rest API V2, use the `Slice` export from
 * `@prismicio/types` for a full interface.
 *
 * @typeParam TSliceType - Type name of the Slice.
 */
declare type SliceLikeRestV2<TSliceType extends string = string> = {
    slice_type: Slice<TSliceType>["slice_type"];
    id?: string;
};
/**
 * The minimum required properties to represent a Prismic Slice from the Prismic
 * GraphQL API for the `<SliceZone>` component.
 *
 * @typeParam TSliceType - Type name of the Slice.
 */
declare type SliceLikeGraphQL<TSliceType extends string = string> = {
    type: Slice<TSliceType>["slice_type"];
};
/**
 * The minimum required properties to represent a Prismic Slice for the
 * `<SliceZone />` component.
 *
 * If using Prismic's REST API, use the `Slice` export from `@prismicio/types`
 * for a full interface.
 *
 * @typeParam TSliceType - Type name of the Slice
 */
declare type SliceLike<TSliceType extends string = string> = SliceLikeRestV2<TSliceType> | SliceLikeGraphQL<TSliceType>;
/**
 * A looser version of the `SliceZone` type from `@prismicio/types` using
 * `SliceLike`.
 *
 * If using Prismic's REST API, use the `SliceZone` export from
 * `@prismicio/types` for the full type.
 *
 * @typeParam TSlice - The type(s) of slices in the Slice Zone
 */
declare type SliceZoneLike<TSlice extends SliceLike = SliceLike> = readonly TSlice[];
/**
 * Vue props for a component rendering content from a Prismic Slice using the
 * `<SliceZone />` component.
 *
 * @typeParam TSlice - The type(s) of slices in the Slice Zone
 * @typeParam TContext - Arbitrary data passed to `<SliceZone />` and made
 *   available to all Slice components
 */
declare type SliceComponentProps<TSlice extends SliceLike = any, TContext = unknown> = {
    /**
     * Slice data for this component.
     */
    slice: TSlice;
    /**
     * The index of the Slice in the Slice Zone.
     */
    index: number;
    /**
     * All Slices from the Slice Zone to which the Slice belongs.
     */
    slices: SliceZoneLike<SliceLike>;
    /**
     * Arbitrary data passed to `<SliceZone />` and made available to all Slice
     * components.
     */
    context: TContext;
};
/**
 * Native Vue props for a component rendering content from a Prismic Slice using
 * the `<SliceZone />` component.
 *
 * @typeParam TSlice - The Slice type
 * @typeParam TContext - Arbitrary data passed to `<SliceZone />` and made
 *   available to all Slice components
 */
declare type DefineComponentSliceComponentProps<TSlice extends SliceLike = any, TContext = unknown> = {
    slice: {
        type: PropType<SliceComponentProps<TSlice, TContext>["slice"]>;
        required: true;
    };
    index: {
        type: PropType<SliceComponentProps<TSlice, TContext>["index"]>;
        required: true;
    };
    slices: {
        type: PropType<SliceComponentProps<TSlice, TContext>["slices"]>;
        required: true;
    };
    context: {
        type: PropType<SliceComponentProps<TSlice, TContext>["context"]>;
        required: true;
    };
};
/**
 * Gets native Vue props for a component rendering content from a Prismic Slice
 * using the `<SliceZone />` component. Props are: `["slice", "index", "slices",
 * "context"]`
 *
 * @example Defining a new slice component:
 *
 * ```javascript
 * import { getSliceComponentProps } from "@prismicio/vue";
 *
 * export default {
 * 	props: getSliceComponentProps(),
 * };
 * ```
 *
 * @example Defining a new slice component with visual hint:
 *
 * ```javascript
 * import { getSliceComponentProps } from "@prismicio/vue";
 *
 * export default {
 * 	props: getSliceComponentProps(["slice", "index", "slices", "context"]),
 * };
 * ```
 *
 * @typeParam TSlice - The Slice type
 * @typeParam TContext - Arbitrary data passed to `<SliceZone />` and made
 *   available to all Slice components
 * @param propsHint - An optional array of prop names used for the sole purpose
 *   of having a visual hint of which props are made available to the slice,
 *   this parameters doesn't have any effect
 *
 * @returns Props object to use with {@link defineComponent}
 */
declare const getSliceComponentProps: <TSlice extends SliceLike<string> = any, TContext = unknown>(propsHint?: ["slice", "index", "slices", "context"]) => DefineComponentSliceComponentProps<TSlice, TContext>;
/**
 * A Vue component to be rendered for each instance of its Slice.
 *
 * @typeParam TSlice - The type(s) of slices in the Slice Zone
 * @typeParam TContext - Arbitrary data made available to all Slice components
 */
declare type SliceComponentType<TSlice extends SliceLike = any, TContext = unknown> = DefineComponent<SliceComponentProps<TSlice, TContext>> | FunctionalComponent<SliceComponentProps<TSlice, TContext>>;
/**
 * This Slice component can be used as a reminder to provide a proper
 * implementation.
 *
 * This is also the default Vue component rendered when a component mapping
 * cannot be found in `<SliceZone />`.
 */
declare const TODOSliceComponent: FunctionalComponent<SliceComponentProps<any, unknown>, {}> | DefineComponent<SliceComponentProps<any, unknown>, {}, {}, vue.ComputedOptions, vue.MethodOptions, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<SliceComponentProps<any, unknown>>, {
    slice: any;
}>;
/**
 * A record of Slice types mapped to Vue components. Each components will be
 * rendered for each instance of their Slice type.
 *
 * @typeParam TSlice - The type(s) of slices in the Slice Zone
 * @typeParam TContext - Arbitrary data made available to all Slice components
 */
declare type SliceZoneComponents<TSlice extends SliceLike = SliceLike, TContext = unknown> = {
    [SliceType in ExtractSliceType<TSlice>]: SliceComponentType<Extract<TSlice, SliceLike<SliceType>>, TContext> | string;
};
/**
 * Gets an optimized record of Slice types mapped to Vue components. Each
 * components will be rendered for each instance of their Slice type.
 *
 * @remarks
 * This is essentially an helper function to ensure {@link markRaw} is correctly
 * applied on each components, improving performances.
 * @example Defining a slice components:
 *
 * ```javascript
 * import { defineSliceZoneComponents } from "@prismicio/vue";
 *
 * export default {
 *   data() {
 *     components: defineSliceZoneComponents({
 *       foo: Foo,
 *       bar: defineAsyncComponent(
 *         () => new Promise((res) => res(Bar)),
 *       ),
 *       baz: "Baz",
 *     }),
 *   }
 * };
 * ```
 *
 * @typeParam TSlice - The type(s) of slices in the Slice Zone
 * @typeParam TContext - Arbitrary data made available to all Slice components
 *
 * @param components - {@link SliceZoneComponents}
 *
 * @returns A new optimized record of {@link SliceZoneComponents}
 */
declare const defineSliceZoneComponents: <TSlice extends SliceLike<string> = any, TContext = unknown>(components: SliceZoneComponents<TSlice, TContext>) => SliceZoneComponents<TSlice, TContext>;
/**
 * Arguments for a `<SliceZone>` `resolver` function.
 */
declare type SliceZoneResolverArgs<TSlice extends SliceLike = SliceLike> = {
    /**
     * The Slice to resolve to a Vue component..
     */
    slice: TSlice;
    /**
     * The name of the Slice.
     */
    sliceName: ExtractSliceType<TSlice>;
    /**
     * The index of the Slice in the Slice Zone.
     */
    i: number;
};
/**
 * A function that determines the rendered Vue component for each Slice in the
 * Slice Zone. If a nullish value is returned, the component will fallback to
 * the `components` or `defaultComponent` props to determine the rendered
 * component.
 *
 * @deprecated Use the `components` prop instead.
 *
 * @param args - Arguments for the resolver function.
 *
 * @returns The Vue component to render for a Slice.
 */
declare type SliceZoneResolver<TSlice extends SliceLike = any, TContext = unknown> = (args: SliceZoneResolverArgs<TSlice>) => SliceComponentType<any, TContext> | string | undefined | null;
/**
 * Props for `<SliceZone />`.
 *
 * @typeParam TContext - Arbitrary data made available to all Slice components
 */
declare type SliceZoneProps<TContext = unknown> = {
    /**
     * List of Slice data from the Slice Zone.
     */
    slices: SliceZoneLike;
    /**
     * A record mapping Slice types to Vue components.
     */
    components?: SliceZoneComponents;
    /**
     * A function that determines the rendered Vue component for each Slice in the
     * Slice Zone.
     *
     * @deprecated Use the `components` prop instead.
     *
     * @param args - Arguments for the resolver function.
     *
     * @returns The Vue component to render for a Slice.
     */
    resolver?: SliceZoneResolver<any, TContext>;
    /**
     * Arbitrary data made available to all Slice components.
     */
    context?: TContext;
    /**
     * A component or a functional component rendered if a component mapping from
     * the `components` prop cannot be found.
     *
     * @remarks
     * Components will be rendered using the {@link SliceComponentProps} interface.
     *
     * @defaultValue The Slice Zone default component provided to `@prismicio/vue` plugin if configured, otherwise `null` when `process.env.NODE_ENV === "production"` else {@link TODOSliceComponent}.
     */
    defaultComponent?: SliceComponentType<any, TContext>;
    /**
     * An HTML tag name, a component, or a functional component used to wrap the
     * output. The Slice Zone is not wrapped by default.
     */
    wrapper?: string | ConcreteComponent;
};
/**
 * Component to render a Prismic Slice Zone.
 *
 * @see Component props {@link SliceZoneProps}
 * @see Templating Slice Zones {@link https://prismic.io/docs/technologies/vue-template-content#slices-and-groups}
 */
declare const SliceZone: new () => {
    $props: AllowedComponentProps & ComponentCustomProps & VNodeProps & SliceZoneProps;
};

/**
 * Options used by `@prismicio/vue` components.
 */
declare type PrismicPluginComponentsOptions = {
    /**
     * Value of the `rel` attribute to use on links rendered with
     * `target="_blank"`
     *
     * @defaultValue `"noopener noreferrer"`
     */
    linkBlankTargetRelAttribute?: string;
    /**
     * An HTML tag name, a component, or a functional component used to render
     * internal links.
     *
     * @remarks
     * HTML tag names will be rendered using the anchor tag interface (`href`,
     * `target`, and `rel` attributes).
     * @remarks
     * Components will be rendered using Vue Router {@link RouterLink} interface
     * (`to` props).
     * @defaultValue {@link RouterLink}
     */
    linkInternalComponent?: string | ConcreteComponent;
    /**
     * An HTML tag name, a component, or a functional component used to render
     * external links.
     *
     * @remarks
     * HTML tag names will be rendered using the anchor tag interface (`href`,
     * `target`, and `rel` attributes).
     * @remarks
     * Components will be rendered using Vue Router {@link RouterLink} interface
     * (`to` props).
     * @defaultValue `"a"`
     */
    linkExternalComponent?: string | ConcreteComponent;
    /**
     * An HTML tag name, a component, or a functional component used to render
     * images.
     *
     * @remarks
     * HTML tag names and components will be rendered using the `img` tag
     * interface (`src` and `alt` attribute). Components will also receive an
     * additional `copyright` props.
     * @defaultValue `"img"`
     */
    imageComponent?: string | ConcreteComponent;
    /**
     * Default widths to use when rendering an image with `widths="defaults"`
     *
     * @remarks
     * Consider configuring image widths within your content type definition and
     * using `widths="auto"` instead to give content writers the ability to crop
     * images in the editor.
     * @defaultValue `@prismicio/helpers` defaults
     */
    imageWidthSrcSetDefaults?: number[];
    /**
     * Default pixel densities to use when rendering an image with
     * `pixel-densities="defaults"`
     *
     * @defaultValue `@prismicio/helpers` defaults
     */
    imagePixelDensitySrcSetDefaults?: number[];
    /**
     * A component or a functional component rendered if a component mapping from
     * the `components` prop cannot be found.
     *
     * @remarks
     * Components will be rendered using the {@link SliceComponentProps} interface.
     *
     * @defaultValue `null` when `process.env.NODE_ENV === "production"` else {@link TODOSliceComponent}
     */
    sliceZoneDefaultComponent?: SliceComponentType;
};
/**
 * Common options supported by `@prismicio/vue` plugin.
 */
declare type PrismicPluginOptionsBase = {
    /**
     * An optional link resolver function used to resolve links to Prismic
     * documents when not using the route resolver parameter with
     * `@prismicio/client`.
     *
     * @see Link resolver documentation {@link https://prismic.io/docs/core-concepts/link-resolver-route-resolver#link-resolver}
     */
    linkResolver?: LinkResolverFunction;
    /**
     * An optional HTML serializer to customize the way rich text fields are
     * rendered.
     *
     * @see HTML serializer documentation {@link https://prismic.io/docs/core-concepts/html-serializer}
     */
    htmlSerializer?: HTMLFunctionSerializer | HTMLMapSerializer;
    /**
     * Whether or not to inject components globally.
     *
     * @defaultValue `true`
     */
    injectComponents?: boolean;
    /**
     * Options used by Prismic Vue components.
     *
     * @see Components options {@link PrismicPluginComponentsOptions}
     */
    components?: PrismicPluginComponentsOptions;
};
/**
 * Options to init `@prismicio/vue` plugin with a client instance.
 *
 * @see {@link PrismicPluginOptionsBase} for shared options
 */
declare type PrismicPluginOptionsWithClient = PrismicPluginOptionsBase & {
    /**
     * A `@prismicio/client` instance used to fetch content from a Prismic
     * repository to configure the plugin with.
     *
     * @remarks
     * The client will be used by `@prismicio/vue` composables, such as
     * {@link usePrismicDocuments} and exposed through `this.$prismic.client` and
     * `usePrismic().client`.
     * @see Prismic client documentation {@link https://prismic.io/docs/technologies/javascript}
     */
    client: Client;
    /**
     * Ensures type union is a strict or.
     *
     * @internal
     */
    endpoint?: never;
    /**
     * Ensures type union is a strict or.
     *
     * @internal
     */
    clientConfig?: never;
};
/**
 * Options to init `@prismicio/vue` plugin with a repository ID or API endpoint.
 *
 * @see {@link PrismicPluginOptionsBase} for shared options
 */
declare type PrismicPluginOptionsWithEndpoint = PrismicPluginOptionsBase & {
    /**
     * A Prismic repository endpoint to init the plugin's `@prismicio/client`
     * instance used to fetch content from a Prismic repository with.
     *
     * @remarks
     * Said client will be used by `@prismicio/vue` composables, such as
     * {@link usePrismicDocuments} and exposed through `this.$prismic.client` and
     * `usePrismic().client`.
     * @example A repository ID:
     *
     *     "my-repo";
     *
     * @example A full repository endpoint:
     *
     *     "https://my-repo.cdn.prismic.io/api/v2";
     *
     * @see Prismic client documentation {@link https://prismic.io/docs/technologies/javascript}
     */
    endpoint: string;
    /**
     * An optional object to configure `@prismicio/client` instance further.
     *
     * @example Accessing a private private repository:
     *
     * ```javascript
     * {
     * 	"accessToken": "abc"
     * }
     * ```
     *
     * @example Using a route resolver:
     *
     * ```javascript
     * {
     * 	"defaultParams": {
     * 		"routes": [
     * 			{
     * 				"type": "page",
     * 				"path": "/:uid"
     * 			},
     * 			{
     * 				"type": "post",
     * 				"path": "/blog/:uid"
     * 			}
     * 		]
     * 	}
     * }
     * ```
     *
     * @see Prismic client documentation {@link https://prismic.io/docs/technologies/javascript}
     * @see Route resolver documentation {@link https://prismic.io/docs/core-concepts/link-resolver-route-resolver#route-resolver}
     */
    clientConfig?: ClientConfig;
    /**
     * Ensures type union is a strict or.
     *
     * @internal
     */
    client?: never;
};
/**
 * `@prismicio/vue` plugin options.
 *
 * @see Prismic Official Vue.js documentation: {@link https://prismic.io/docs/technologies/vuejs}
 * @see Plugin repository: {@link https://github.com/prismicio/prismic-vue}
 */
declare type PrismicPluginOptions = PrismicPluginOptionsWithClient | PrismicPluginOptionsWithEndpoint;
/**
 * `@prismicio/client` related methods and properties exposed by
 * `@prismicio/vue` plugin and accessible through `this.$prismic` and
 * `usePrismic()`.
 */
declare type PrismicPluginClient = {
    /**
     * A `@prismicio/client` instance.
     */
    client: Client;
    /**
     * Query predicates from `@prismicio/client`.
     */
    predicate: typeof predicate;
    /**
     * Prismic cookies from `@prismicio/client`.
     */
    cookie: typeof cookie;
};
/**
 * `@prismicio/helpers` related methods exposed by `@prismicio/vue` plugin and
 * accessible through `this.$prismic` and `usePrismic()`.
 */
declare type PrismicPluginHelpers = {
    /**
     * Serializes a rich text or title field to a plain text string. This is
     * `@prismicio/helpers` {@link asText} function.
     *
     * @see Templating rich text and title fields {@link https://prismic.io/docs/technologies/vue-template-content#rich-text-and-titles}
     */
    asText: typeof asText;
    /**
     * Serializes a rich text or title field to an HTML string. This is
     * `@prismicio/helpers` {@link asHTML} function.
     *
     * @remarks
     * If no `linkResolver` is provided the function will use the one provided to
     * the plugin at {@link PrismicPluginOptions.linkResolver} if available.
     * @remarks
     * If no `htmlSerializer` is provided the function will use the one provided
     * to the plugin at {@link PrismicPluginOptions.htmlSerializer} if available.
     * @see Templating rich text and title fields {@link https://prismic.io/docs/technologies/vue-template-content#rich-text-and-titles}
     */
    asHTML: typeof asHTML;
    /**
     * Resolves any type of link field or document to a URL. This is
     * `@prismicio/helpers` {@link asLink} function.
     *
     * @remarks
     * If no `linkResolver` is provided the function will use the one provided to
     * the plugin at {@link PrismicPluginOptions.linkResolver} if available.
     * @see Templating link fields {@link https://prismic.io/docs/technologies/vue-template-content#links-and-content-relationships}
     */
    asLink: (linkField: Parameters<typeof asLink>[0], linkResolver?: LinkResolverFunction) => string | null;
    /**
     * Transforms a date or timestamp field into a JavaScript Date object. This is
     * `@prismicio/helpers` {@link asDate} function.
     */
    asDate: typeof asDate;
    /**
     * Returns the URL of an Image field with optional image transformations (via
     * Imgix URL parameters). This is `@prismicio/helpers` {@link asImageSrc}
     * function.
     */
    asImageSrc: typeof asImageSrc;
    /**
     * Creates a width-based `srcset` from an Image field with optional image
     * transformations (via Imgix URL parameters). This is `@prismicio/helpers`
     * {@link asImageWidthSrcSet} function.
     */
    asImageWidthSrcSet: typeof asImageWidthSrcSet;
    /**
     * Creates a pixel-density-based `srcset` from an Image field with optional
     * image transformations (via Imgix URL parameters). This is
     * `@prismicio/helpers` {@link asImagePixelDensitySrcSet} function.
     */
    asImagePixelDensitySrcSet: typeof asImagePixelDensitySrcSet;
    /**
     * Converts a document into a link field. This is `@prismicio/helpers`
     * {@link documentToLinkField} function.
     *
     * @internal
     */
    documentToLinkField: typeof documentToLinkField;
};
/**
 * Methods and properties exposed by `@prismicio/vue` plugin and accessible
 * through `this.$prismic` and `usePrismic()`.
 */
declare type PrismicPlugin = {
    /**
     * Options uses to initialize the plugin.
     *
     * @see `@prismicio/vue` plugin options {@link PrismicPluginOptions}
     */
    readonly options: PrismicPluginOptions;
    /**
     * `@prismicio/vue` plugin install function used by Vue.
     *
     * @internal
     */
    install: (app: App) => void;
} & PrismicPluginClient & PrismicPluginHelpers;
/**
 * States of a `@prismicio/client` composable.
 */
declare const enum PrismicClientComposableState {
    /**
     * The composable has not started fetching.
     */
    Idle = "idle",
    /**
     * The composable is fetching data.
     */
    Pending = "pending",
    /**
     * The composable sucessfully fetched data.
     */
    Success = "success",
    /**
     * The composable failed to fetch data.
     */
    Error = "error"
}
/**
 * Type to transform a static object into one that allows passing Refs as
 * values.
 *
 * @internal
 */
declare type VueUseOptions<T> = {
    [K in keyof T]: Ref<T[K]> | T[K];
};

/**
 * Creates a `@prismicio/vue` plugin instance that can be used by a Vue app.
 *
 * @param options - {@link PrismicPluginOptions}
 *
 * @returns `@prismicio/vue` plugin instance {@link PrismicPlugin}
 *
 * @see Prismic Official Vue.js documentation: {@link https://prismic.io/docs/technologies/vuejs}
 * @see Plugin repository: {@link https://github.com/prismicio/prismic-vue}
 */
declare const createPrismic: (options: PrismicPluginOptions) => PrismicPlugin;

/**
 * Accesses `@prismicio/vue` plugin interface.
 *
 * @example With the composition API:
 *
 * ```javascript
 * import { usePrismic } from "@prismicio/vue";
 *
 * export default {
 * 	setup() {
 * 		const prismic = usePrismic();
 *
 * 		return {};
 * 	},
 * };
 * ```
 *
 * @returns The interface {@link PrismicPlugin}
 */
declare const usePrismic: () => PrismicPlugin;

/**
 * Props for `<PrismicEmbed />`.
 */
declare type PrismicEmbedProps = {
    /**
     * The Prismic embed field to render.
     */
    field: EmbedField;
    /**
     * An HTML tag name, a component, or a functional component used to wrap the
     * output.
     *
     * @defaultValue `"div"`
     */
    wrapper?: string | ConcreteComponent;
};
/**
 * Component to render a Prismic embed field.
 *
 * @see Component props {@link PrismicEmbedProps}
 * @see Templating embed fields {@link https://prismic.io/docs/technologies/vue-template-content#embeds}
 */
declare const PrismicEmbed: new () => {
    $props: AllowedComponentProps & ComponentCustomProps & VNodeProps & PrismicEmbedProps;
};

/**
 * Props for `<PrismicImage />`.
 */
declare type PrismicImageProps = {
    /**
     * The Prismic image field to render.
     */
    field: ImageField;
    /**
     * An HTML tag name, a component, or a functional component used to render
     * images.
     *
     * @remarks
     * HTML tag names and components will be rendered using the `img` tag
     * interface (`src`, `srcset`, and `alt` attribute). Components will also
     * receive an additional `copyright` props.
     * @defaultValue The one provided to `@prismicio/vue` plugin if configured, `"img"` otherwise.
     */
    imageComponent?: string | ConcreteComponent;
    /**
     * An object of Imgix URL API parameters.
     *
     * @see Imgix URL parameters reference: https://docs.imgix.com/apis/rendering
     */
    imgixParams?: Parameters<typeof asImageSrc>[1];
    /**
     * Adds an additional `srcset` attribute to the image following given widths.
     *
     * @remarks
     * A special value of `"thumbnails"` is accepted to automatically use image
     * widths coming from the API.
     * @remarks
     * A special value of `"defaults"` is accepted to automatically use image
     * widths coming from the plugin configuration.
     * @remarks
     * This prop is not compatible with the `pixelDensities` prop. When both are
     * used the `pixelDensities` prop will be ignored.
     */
    widths?: NonNullable<Parameters<typeof asImageWidthSrcSet>[1]>["widths"] | "thumbnails" | "defaults";
    /**
     * Adds an additional `srcset` attribute to the image following giving pixel
     * densities.
     *
     * @remarks
     * A special value of `"defaults"` is accepted to automatically use image
     * pixel densities coming from the plugin configuration.
     * @remarks
     * This prop is not compatible with the `widths` prop. When both are used, the
     * `pixelDensities` prop will be ignored.
     */
    pixelDensities?: NonNullable<Parameters<typeof asImagePixelDensitySrcSet>[1]>["pixelDensities"] | "defaults";
};
/**
 * Options for {@link usePrismicImage}.
 */
declare type UsePrismicImageOptions = VueUseOptions<Omit<PrismicImageProps, "imageComponent">>;
/**
 * Return type of {@link usePrismicImage}.
 */
declare type UsePrismicImageReturnType = {
    /**
     * Resolved image `src` value.
     */
    src: ComputedRef<string | null>;
    /**
     * Resolved image `srcset` value.
     */
    srcset: ComputedRef<string | null>;
    /**
     * Resolved image `alt` value.
     */
    alt: ComputedRef<string>;
    /**
     * Resolved image `copyright` value.
     */
    copyright: ComputedRef<string | null>;
};
/**
 * A low level composable that returns a resolved information about a Prismic
 * image field.
 *
 * @param props - {@link UsePrismicImageOptions}
 *
 * @returns - Resolved image information {@link UsePrismicImageReturnType}
 */
declare const usePrismicImage: (props: UsePrismicImageOptions) => UsePrismicImageReturnType;
/**
 * Component to render a Prismic image field.
 *
 * @see Component props {@link PrismicImageProps}
 * @see Templating image fields {@link https://prismic.io/docs/technologies/vue-template-content#images}
 */
declare const PrismicImage: new () => {
    $props: AllowedComponentProps & ComponentCustomProps & VNodeProps & PrismicImageProps;
};

/**
 * Props for `<PrismicLink />`.
 */
declare type PrismicLinkProps = {
    /**
     * The Prismic link field or document to render.
     */
    field: LinkField | PrismicDocument;
    /**
     * A link resolver function used to resolve links when not using the route
     * resolver parameter with `@prismicio/client`.
     *
     * @defaultValue The link resolver provided to `@prismicio/vue` plugin if configured.
     *
     * @see Link resolver documentation {@link https://prismic.io/docs/core-concepts/link-resolver-route-resolver#link-resolver}
     */
    linkResolver?: LinkResolverFunction;
    /**
     * An explicit `target` attribute to apply to the rendered link.
     */
    target?: string | null;
    /**
     * An explicit `rel` attribute to apply to the rendered link.
     */
    rel?: string | null;
    /**
     * Value of the `rel` attribute to use on links rendered with
     * `target="_blank"`.
     *
     * @defaultValue The one provided to `@prismicio/vue` plugin if configured, `"noopener noreferrer"` otherwise.
     */
    blankTargetRelAttribute?: string | null;
    /**
     * An HTML tag name, a component, or a functional component used to render
     * internal links.
     *
     * @remarks
     * HTML tag names will be rendered using the anchor tag interface (`href`,
     * `target`, and `rel` attributes).
     * @remarks
     * Components will be rendered using Vue Router {@link RouterLink} interface
     * (`to` props).
     * @defaultValue The one provided to `@prismicio/vue` plugin if configured, {@link RouterLink} otherwise.
     */
    internalComponent?: string | ConcreteComponent;
    /**
     * An HTML tag name, a component, or a functional component used to render
     * external links.
     *
     * @remarks
     * HTML tag names will be rendered using the anchor tag interface (`href`,
     * `target`, and `rel` attributes).
     * @remarks
     * Components will be rendered using Vue Router {@link RouterLink} interface
     * (`to` props).
     * @defaultValue The one provided to `@prismicio/vue` plugin if configured, `"a"` otherwise.
     */
    externalComponent?: string | ConcreteComponent;
};
/**
 * Options for {@link usePrismicLink}.
 */
declare type UsePrismicLinkOptions = VueUseOptions<PrismicLinkProps>;
/**
 * Return type of {@link usePrismicLink}.
 */
declare type UsePrismicLinkReturnType = {
    /**
     * Suggested component to render for provided link field.
     */
    type: ComputedRef<string | ConcreteComponent>;
    /**
     * Resolved anchor `href` value.
     */
    href: ComputedRef<string>;
    /**
     * Resolved anchor `target` value.
     */
    target: ComputedRef<string | null>;
    /**
     * Resolved anchor `rel` value.
     */
    rel: ComputedRef<string | null>;
};
/**
 * A low level composable that returns resolved information about a Prismic link
 * field.
 *
 * @param props - {@link UsePrismicLinkOptions}
 *
 * @returns - Resolved link information {@link UsePrismicLinkReturnType}
 */
declare const usePrismicLink: (props: UsePrismicLinkOptions) => UsePrismicLinkReturnType;
/**
 * Component to render a Prismic link field.
 *
 * @see Component props {@link PrismicLinkProps}
 * @see Templating link fields {@link https://prismic.io/docs/technologies/vue-template-content#links-and-content-relationships}
 */
declare const PrismicLink: new () => {
    $props: AllowedComponentProps & ComponentCustomProps & VNodeProps & PrismicLinkProps;
};

/**
 * Props for `<PrismicText />`.
 */
declare type PrismicTextProps = {
    /**
     * The Prismic rich text or title field to render.
     */
    field: RichTextField | null | undefined;
    /**
     * Separator used to join each element.
     *
     * @defaultValue `" "` (a space)
     */
    separator?: string;
    /**
     * An HTML tag name, a component, or a functional component used to wrap the
     * output.
     *
     * @defaultValue `"div"`
     */
    wrapper?: string | ConcreteComponent;
    /**
     * The string value to be rendered when the field is empty. If a fallback is
     * not given, `""` (nothing) will be rendered.
     */
    fallback?: string;
};
/**
 * Options for {@link usePrismicText}.
 */
declare type UsePrismicTextOptions = VueUseOptions<Omit<PrismicTextProps, "wrapper">>;
/**
 * Return type of {@link usePrismicText}.
 */
declare type UsePrismicTextReturnType = {
    /**
     * Serialized rich text field as plain text.
     */
    text: ComputedRef<string>;
};
/**
 * A low level composable that returns a serialized rich text field as plain
 * text.
 *
 * @param props - {@link UsePrismicTextOptions}
 *
 * @returns - Serialized rich text field as plain text
 *   {@link UsePrismicTextReturnType}
 */
declare const usePrismicText: (props: UsePrismicTextOptions) => UsePrismicTextReturnType;
/**
 * Component to render a Prismic rich text field as plain text.
 *
 * @see Component props {@link PrismicTextProps}
 * @see Templating rich text and title fields {@link https://prismic.io/docs/technologies/vue-template-content#rich-text-and-titles}
 */
declare const PrismicText: new () => {
    $props: AllowedComponentProps & ComponentCustomProps & VNodeProps & PrismicTextProps;
};

/**
 * Props for `<PrismicRichText />`.
 */
declare type PrismicRichTextProps = {
    /**
     * The Prismic rich text or title field to render.
     */
    field: RichTextField | null | undefined;
    /**
     * A link resolver function used to resolve link when not using the route
     * resolver parameter with `@prismicio/client`.
     *
     * @defaultValue The link resolver provided to `@prismicio/vue` plugin if configured.
     *
     * @see Link resolver documentation {@link https://prismic.io/docs/core-concepts/link-resolver-route-resolver#link-resolver}
     */
    linkResolver?: LinkResolverFunction;
    /**
     * An HTML serializer to customize the way rich text fields are rendered.
     *
     * @defaultValue The HTML serializer provided to `@prismicio/vue` plugin if configured.
     *
     * @see HTML serializer documentation {@link https://prismic.io/docs/core-concepts/html-serializer}
     */
    htmlSerializer?: HTMLFunctionSerializer | HTMLMapSerializer;
    /**
     * An HTML tag name, a component, or a functional component used to wrap the
     * output.
     *
     * @defaultValue `"div"`
     */
    wrapper?: string | ConcreteComponent;
    /**
     * The HTML value to be rendered when the field is empty. If a fallback is not
     * given, `""` (nothing) will be rendered.
     */
    fallback?: string;
};
/**
 * Options for {@link usePrismicRichText}.
 */
declare type UsePrismicRichTextOptions = VueUseOptions<Omit<PrismicRichTextProps, "wrapper">>;
/**
 * Return type of {@link usePrismicRichText}.
 */
declare type UsePrismicRichTextReturnType = {
    /**
     * Serialized rich text field as HTML.
     */
    html: ComputedRef<string>;
};
/**
 * A low level composable that returns a serialized rich text field as HTML.
 *
 * @param props - {@link UsePrismicRichTextOptions}
 *
 * @returns - Serialized rich text field as HTML
 *   {@link UsePrismicRichTextReturnType}
 */
declare const usePrismicRichText: (props: UsePrismicRichTextOptions) => UsePrismicRichTextReturnType;
/**
 * Component to render a Prismic rich text field as HTML.
 *
 * @see Component props {@link PrismicRichTextProps}
 * @see Templating rich text and title fields {@link https://prismic.io/docs/technologies/vue-template-content#rich-text-and-titles}
 */
declare const PrismicRichText: new () => {
    $props: AllowedComponentProps & ComponentCustomProps & VNodeProps & PrismicRichTextProps;
};

declare type ClientError = PrismicError<unknown> | ParsingError | ForbiddenError;
/**
 * @internal
 */
declare type ComposableOnlyParameters = {
    client?: Ref<Client> | Client;
};
/**
 * The return type of a `@prismicio/client` Vue composable.
 *
 * @typeParam TData - The expected format of the `data` property of the returned
 *   object
 */
declare type ClientComposableReturnType<TData = unknown> = {
    /**
     * The current state of the composable's client method call.
     */
    state: Ref<PrismicClientComposableState>;
    /**
     * Data returned by the client.
     */
    data: Ref<TData | null>;
    /**
     * Error returned by the composable's client method call if in an errror
     * state.
     */
    error: Ref<ClientError | Error | null>;
    /**
     * Perform the composable's client method call again.
     */
    refresh: () => Promise<void>;
};

/**
 * A composable that queries content from the Prismic repository.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.get}
 */
declare const usePrismicDocuments: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(params?: (Partial<_prismicio_client.BuildQueryURLArgs> & {
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<Query<TDocument>>;
/**
 * A composable that queries content from the Prismic repository and returns
 * only the first result, if any.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of the Prismic document returned
 *
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getFirst}
 */
declare const useFirstPrismicDocument: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(params?: (Partial<_prismicio_client.BuildQueryURLArgs> & {
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<TDocument>;
/**
 * A composable that queries a document from the Prismic repository with a
 * specific ID.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of the Prismic document returned
 *
 * @param id - ID of the document
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getByID}
 */
declare const usePrismicDocumentByID: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(id: string, params?: (Partial<_prismicio_client.BuildQueryURLArgs> & {
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<TDocument>;
/**
 * A composable that queries documents from the Prismic repository with specific
 * IDs.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param ids - A list of document IDs
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getByIDs}
 */
declare const usePrismicDocumentsByIDs: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(ids: string[], params?: (Partial<_prismicio_client.BuildQueryURLArgs> & {
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<Query<TDocument>>;
/**
 * A composable that queries all documents from the Prismic repository with
 * specific IDs.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param ids - A list of document IDs
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getAllByIDs}
 */
declare const useAllPrismicDocumentsByIDs: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(ids: string[], params?: (Partial<_prismicio_client.BuildQueryURLArgs> & {
    limit?: number | undefined;
} & {
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<TDocument[]>;
/**
 * A composable that queries a document from the Prismic repository with a
 * specific UID and Custom Type.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of the Prismic document returned
 *
 * @param documentType - The API ID of the document's Custom Type
 * @param uid - UID of the document
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getByUID}
 */
declare const usePrismicDocumentByUID: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(documentType: any, uid: string, params?: (Partial<_prismicio_client.BuildQueryURLArgs> & {
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<TDocument>;
/**
 * A composable that queries documents from the Prismic repository with specific
 * UIDs.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param documentType - The API ID of the document's Custom Type
 * @param uids - A list of document UIDs
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getByIDs}
 */
declare const usePrismicDocumentsByUIDs: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(documentType: any, uids: string[], params?: (Partial<_prismicio_client.BuildQueryURLArgs> & {
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<Query<TDocument>>;
/**
 * A composable that queries all documents from the Prismic repository with
 * specific UIDs.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param documentType - The API ID of the document's Custom Type
 * @param uids - A list of document UIDs
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getAllByIDs}
 */
declare const useAllPrismicDocumentsByUIDs: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(documentType: any, ids: string[], params?: (Partial<_prismicio_client.BuildQueryURLArgs> & {
    limit?: number | undefined;
} & {
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<TDocument[]>;
/**
 * A composable that queries a singleton document from the Prismic repository
 * for a specific Custom Type.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of the Prismic document returned
 *
 * @param documentType - The API ID of the singleton Custom Type
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getSingle}
 */
declare const useSinglePrismicDocument: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(documentType: any, params?: (Partial<_prismicio_client.BuildQueryURLArgs> & {
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<TDocument>;
/**
 * A composable that queries documents from the Prismic repository for a
 * specific Custom Type.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param documentType - The API ID of the Custom Type
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getByType}
 */
declare const usePrismicDocumentsByType: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(documentType: any, params?: (Partial<_prismicio_client.BuildQueryURLArgs> & {
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<Query<TDocument>>;
/**
 * A composable that queries all documents from the Prismic repository for a
 * specific Custom Type.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param documentType - The API ID of the Custom Type
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getAllByType}
 */
declare const useAllPrismicDocumentsByType: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(documentType: any, params?: (Partial<Omit<_prismicio_client.BuildQueryURLArgs, "page">> & {
    limit?: number | undefined;
} & {
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<TDocument[]>;
/**
 * A composable that queries documents from the Prismic repository with a
 * specific tag.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tag - The tag that must be included on a document
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getByTag}
 */
declare const usePrismicDocumentsByTag: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(tag: string, params?: (Partial<_prismicio_client.BuildQueryURLArgs> & {
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<Query<TDocument>>;
/**
 * A composable that queries all documents from the Prismic repository with a
 * specific tag.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tag - The tag that must be included on a document
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getAllByTag}
 */
declare const useAllPrismicDocumentsByTag: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(tag: string, params?: (Partial<Omit<_prismicio_client.BuildQueryURLArgs, "page">> & {
    limit?: number | undefined;
} & {
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<TDocument[]>;
/**
 * A composable that queries documents from the Prismic repository with specific
 * tags. A document must be tagged with all of the queried tags to be included.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tags - A list of tags that must be included on a document
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getByTags}
 */
declare const usePrismicDocumentsByEveryTag: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(tags: string[], params?: (Partial<_prismicio_client.BuildQueryURLArgs> & {
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<Query<TDocument>>;
/**
 * A composable that queries all documents from the Prismic repository with
 * specific tags. A document must be tagged with all of the queried tags to be
 * included.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tags - A list of tags that must be included on a document
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getAllByTags}
 */
declare const useAllPrismicDocumentsByEveryTag: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(tags: string[], params?: (Partial<Omit<_prismicio_client.BuildQueryURLArgs, "page">> & {
    limit?: number | undefined;
} & {
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<TDocument[]>;
/**
 * A composable that queries documents from the Prismic repository with specific
 * tags. A document must be tagged with at least one of the queried tags to be
 * included.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tags - A list of tags that must be included on a document
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getByTags}
 */
declare const usePrismicDocumentsBySomeTags: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(tags: string[], params?: (Partial<_prismicio_client.BuildQueryURLArgs> & {
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<Query<TDocument>>;
/**
 * A composable that queries all documents from the Prismic repository with
 * specific tags. A document must be tagged with at least one of the queried
 * tags to be included.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tags - A list of tags that must be included on a document
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getAllByTags}
 */
declare const useAllPrismicDocumentsBySomeTags: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(tags: string[], params?: (Partial<Omit<_prismicio_client.BuildQueryURLArgs, "page">> & {
    limit?: number | undefined;
} & {
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<TDocument[]>;
/**
 * **IMPORTANT**: Avoid using `dangerouslyUseAllPrismicDocuments` as it may be
 * slower and require more resources than other composables. Prefer using other
 * composables that filter by predicates such as
 * `useAllPrismicDocumentsByType`.
 *
 * A composable that queries content from the Prismic repository and returns all
 * matching content. If no predicates are provided, all documents will be
 * fetched.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getAll}
 */
declare const dangerouslyUseAllPrismicDocuments: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(params?: (Partial<Omit<_prismicio_client.BuildQueryURLArgs, "page">> & {
    limit?: number | undefined;
} & {
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<TDocument[]>;

/**
 * `@prismicio/vue` plugin interface interface location used for
 * {@link usePrismic}.
 *
 * @internal
 */
declare const prismicKey: InjectionKey<PrismicPlugin>;

declare module "@vue/runtime-core" {
    interface ComponentCustomProperties {
        /**
         * `@prismicio/vue` plugin interface exposed on `this`.
         *
         * @see `@prismicio/vue` plugin interface {@link PrismicPlugin}
         */
        $prismic: PrismicPlugin;
    }
}

export { ClientComposableReturnType, DefineComponentSliceComponentProps, PrismicClientComposableState, PrismicEmbed, PrismicEmbedProps, PrismicImage, PrismicImageProps, PrismicLink, PrismicLinkProps, PrismicPlugin, PrismicPluginOptions, PrismicRichText, PrismicRichTextProps, PrismicText, PrismicTextProps, SliceComponentProps, SliceComponentType, SliceLike, SliceLikeGraphQL, SliceLikeRestV2, SliceZone, SliceZoneComponents, SliceZoneLike, SliceZoneProps, SliceZoneResolver, TODOSliceComponent, UsePrismicImageOptions, UsePrismicLinkOptions, UsePrismicRichTextOptions, UsePrismicTextOptions, createPrismic, dangerouslyUseAllPrismicDocuments, defineSliceZoneComponents, getSliceComponentProps, prismicKey, useAllPrismicDocumentsByEveryTag, useAllPrismicDocumentsByIDs, useAllPrismicDocumentsBySomeTags, useAllPrismicDocumentsByTag, useAllPrismicDocumentsByType, useAllPrismicDocumentsByUIDs, useFirstPrismicDocument, usePrismic, usePrismicDocumentByID, usePrismicDocumentByUID, usePrismicDocuments, usePrismicDocumentsByEveryTag, usePrismicDocumentsByIDs, usePrismicDocumentsBySomeTags, usePrismicDocumentsByTag, usePrismicDocumentsByType, usePrismicDocumentsByUIDs, usePrismicImage, usePrismicLink, usePrismicRichText, usePrismicText, useSinglePrismicDocument };
