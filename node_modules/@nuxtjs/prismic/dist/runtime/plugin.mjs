import { defineNuxtPlugin, useCookie, useRequestEvent, refreshNuxtData } from "#app";
import NuxtLink from "#app/components/nuxt-link";
import { createPrismic } from "@prismicio/vue";
import client from "#build/prismic/proxy/client";
import linkResolver from "#build/prismic/proxy/linkResolver";
import htmlSerializer from "#build/prismic/proxy/htmlSerializer";
const pkgName = "@nuxtjs/prismic";
export default defineNuxtPlugin((nuxtApp) => {
  const mergedOptions = nuxtApp.payload.config[pkgName] ?? nuxtApp.payload.config.public[pkgName] ?? {};
  const prismicPlugin = createPrismic({
    ...mergedOptions,
    client,
    linkResolver,
    htmlSerializer,
    injectComponents: false,
    components: {
      linkInternalComponent: NuxtLink,
      linkExternalComponent: NuxtLink,
      ...mergedOptions.components
    }
  });
  nuxtApp.vueApp.use(prismicPlugin);
  if (mergedOptions.preview) {
    const previewCookie = useCookie("io.prismic.preview").value;
    if (process.server) {
      prismicPlugin.client.enableAutoPreviewsFromReq(useRequestEvent()?.req);
    }
    if (previewCookie) {
      try {
        const session = typeof previewCookie === "string" ? JSON.parse(decodeURIComponent(previewCookie)) : previewCookie;
        if (Object.keys(session).some((key) => key in session && typeof session[key] === "object" && session[key] !== null && "preview" in session[key] && session[key].preview)) {
          refreshNuxtData();
        }
      } catch (error) {
        console.warn("Failed to parse Prismic preview cookie", error);
      }
    }
  }
});
