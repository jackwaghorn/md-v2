import { join } from 'node:path';
import { defineNuxtModule, createResolver, addPlugin, addComponent, addImports, extendPages, addTemplate } from '@nuxt/kit';
import { isRepositoryEndpoint, getRepositoryName } from '@prismicio/client';
import * as prismicVue from '@prismicio/vue';
import consola from 'consola';
import { existsSync } from 'node:fs';

const logger = consola.withScope("nuxt:prismic");

const fileExists = (path, extensions = ["js", "ts"]) => {
  if (!path) {
    return null;
  } else if (existsSync(path)) {
    return path;
  }
  const extension = extensions.find((extension2) => existsSync(`${path}.${extension2}`));
  return extension ? `${path}.${extension}` : null;
};

const PACKAGE_NAME = "@nuxtjs/prismic";
const module = defineNuxtModule({
  meta: {
    name: PACKAGE_NAME,
    configKey: "prismic",
    compatibility: { nuxt: "^3.0.0-rc.6" }
  },
  defaults: (nuxt) => ({
    endpoint: "",
    clientConfig: {},
    client: "~/app/prismic/client",
    linkResolver: "~/app/prismic/linkResolver",
    htmlSerializer: "~/app/prismic/htmlSerializer",
    injectComponents: true,
    components: {},
    preview: "/preview",
    toolbar: true
  }),
  hooks: {},
  setup(mergedOptions, nuxt) {
    var _a, _b, _c;
    if (!mergedOptions.endpoint) {
      logger.warn("Options `endpoint` is required, disabling module...");
      return;
    }
    const resolver = createResolver(import.meta.url);
    nuxt.options.build.transpile.push(resolver.resolve("runtime"), "@nuxtjs/prismic", "@prismicio/vue");
    const proxyUserFileWithUndefinedFallback = (filename, path, extensions = ["js", "mjs", "ts"]) => {
      const resolvedFilename = `prismic/proxy/${filename}.ts`;
      const resolvedPath = path.replace(/^(~~|@@)/, nuxt.options.rootDir).replace(/^(~|@)/, nuxt.options.srcDir);
      const maybeUserFile = fileExists(resolvedPath, extensions);
      if (maybeUserFile) {
        logger.info(`Using user-defined \`${filename}\` at \`${maybeUserFile.replace(nuxt.options.srcDir, "~").replace(nuxt.options.rootDir, "~~").replace(/\\/g, "/")}\``);
        addTemplate({
          filename: resolvedFilename,
          getContents: () => `export { default } from '${path}'`
        });
      } else {
        addTemplate({
          filename: resolvedFilename,
          getContents: () => "export default undefined"
        });
      }
    };
    proxyUserFileWithUndefinedFallback("client", mergedOptions.client);
    proxyUserFileWithUndefinedFallback("linkResolver", mergedOptions.linkResolver);
    proxyUserFileWithUndefinedFallback("htmlSerializer", mergedOptions.htmlSerializer);
    (_a = nuxt.options.runtimeConfig).public || (_a.public = {});
    nuxt.options.runtimeConfig.public[PACKAGE_NAME] = mergedOptions;
    addPlugin(resolver.resolve("runtime/plugin"));
    addPlugin(resolver.resolve("runtime/plugin.client"));
    if (mergedOptions.injectComponents) {
      [
        "PrismicEmbed",
        "PrismicImage",
        "PrismicLink",
        "PrismicText",
        "PrismicRichText",
        "SliceZone"
      ].forEach((component) => {
        addComponent({
          name: component,
          export: component,
          filePath: "@prismicio/vue"
        });
      });
    }
    const composableAutoImports = Object.keys(prismicVue).filter((key) => key.startsWith("use")).map((key) => {
      return {
        name: key,
        as: key,
        from: "@prismicio/vue"
      };
    });
    addImports(composableAutoImports);
    addImports({
      name: "usePrismicPreview",
      as: "usePrismicPreview",
      from: resolver.resolve("runtime/usePrismicPreview")
    });
    if (mergedOptions.preview) {
      const maybeUserPreviewPage = fileExists(join(nuxt.options.srcDir, nuxt.options.dir.pages, mergedOptions.preview), ["js", "ts", "vue"]);
      if (maybeUserPreviewPage) {
        logger.info(`Using user-defined preview page at \`${maybeUserPreviewPage.replace(join(nuxt.options.srcDir), "~").replace(nuxt.options.rootDir, "~~").replace(/\\/g, "/")}\`, available at \`${mergedOptions.preview}\``);
      } else {
        logger.info(`Using default preview page, available at \`${mergedOptions.preview}\``);
        extendPages((pages) => {
          pages.unshift({
            name: "prismic-preview",
            path: mergedOptions.preview,
            file: resolver.resolve("runtime/preview.vue")
          });
        });
      }
      if (!mergedOptions.toolbar) {
        logger.warn("`toolbar` option is disabled but `preview` is enabled. Previews won't work unless you manually load the toolbar.");
      }
    }
    if (mergedOptions.toolbar) {
      const repositoryName = isRepositoryEndpoint(mergedOptions.endpoint) ? getRepositoryName(mergedOptions.endpoint) : mergedOptions.endpoint;
      (_b = nuxt.options.app).head || (_b.head = {});
      (_c = nuxt.options.app.head).script || (_c.script = []);
      nuxt.options.app.head.script.push({
        hid: "prismic-preview",
        src: `https://static.cdn.prismic.io/prismic.min.js?repo=${repositoryName}&new=true`,
        async: true,
        defer: true
      });
    }
  }
});

export { module as default };
